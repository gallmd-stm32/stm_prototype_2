
stm_prototype_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08001480  08001480  00011480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080016b0  080016b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080016b8  080016b8  000116b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000116bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000116bc  2**0
                  CONTENTS
  7 .bss          00000060  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000060  20000060  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000116bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010be9  00000000  00000000  000116ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000018e8  00000000  00000000  000222d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000418  00000000  00000000  00023bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a0  00000000  00000000  00023fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001fda  00000000  00000000  00024378  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00009686  00000000  00000000  00026352  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002f9d8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000fec  00000000  00000000  0002fa54  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00030a40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001468 	.word	0x08001468

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08001468 	.word	0x08001468

080001c8 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <NVIC_PriorityGroupConfig+0x24>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001dc:	60d3      	str	r3, [r2, #12]
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
 80001fc:	2300      	movs	r3, #0
 80001fe:	73bb      	strb	r3, [r7, #14]
 8000200:	230f      	movs	r3, #15
 8000202:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d039      	beq.n	8000280 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <NVIC_Init+0xbc>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	43db      	mvns	r3, r3
 8000212:	0a1b      	lsrs	r3, r3, #8
 8000214:	b2db      	uxtb	r3, r3
 8000216:	f003 0307 	and.w	r3, r3, #7
 800021a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	f1c3 0304 	rsb	r3, r3, #4
 8000222:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000224:	7b7a      	ldrb	r2, [r7, #13]
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	fa42 f303 	asr.w	r3, r2, r3
 800022c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	461a      	mov	r2, r3
 8000234:	7bbb      	ldrb	r3, [r7, #14]
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	789a      	ldrb	r2, [r3, #2]
 8000240:	7b7b      	ldrb	r3, [r7, #13]
 8000242:	4013      	ands	r3, r2
 8000244:	b2da      	uxtb	r2, r3
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	4313      	orrs	r3, r2
 800024a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <NVIC_Init+0xc0>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	4413      	add	r3, r2
 800025a:	7bfa      	ldrb	r2, [r7, #15]
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <NVIC_Init+0xc0>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	b2db      	uxtb	r3, r3
 800026a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	f003 031f 	and.w	r3, r3, #31
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027e:	e00f      	b.n	80002a0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000280:	490b      	ldr	r1, [pc, #44]	; (80002b0 <NVIC_Init+0xc0>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f003 031f 	and.w	r3, r3, #31
 8000294:	2201      	movs	r2, #1
 8000296:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000298:	f100 0320 	add.w	r3, r0, #32
 800029c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000e100 	.word	0xe000e100

080002b4 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 80002bc:	2300      	movs	r3, #0
 80002be:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <EXTI_GetITStatus+0x44>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4013      	ands	r3, r2
 80002cc:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80002ce:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <EXTI_GetITStatus+0x44>)
 80002d0:	695a      	ldr	r2, [r3, #20]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4013      	ands	r3, r2
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d005      	beq.n	80002e6 <EXTI_GetITStatus+0x32>
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d002      	beq.n	80002e6 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80002e0:	2301      	movs	r3, #1
 80002e2:	73fb      	strb	r3, [r7, #15]
 80002e4:	e001      	b.n	80002ea <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80002e6:	2300      	movs	r3, #0
 80002e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3714      	adds	r7, #20
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40013c00 	.word	0x40013c00

080002fc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000304:	4a04      	ldr	r2, [pc, #16]	; (8000318 <EXTI_ClearITPendingBit+0x1c>)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	6153      	str	r3, [r2, #20]
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40013c00 	.word	0x40013c00

0800031c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d006      	beq.n	800033c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800032e:	490a      	ldr	r1, [pc, #40]	; (8000358 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4313      	orrs	r3, r2
 8000338:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800033a:	e006      	b.n	800034a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800033c:	4906      	ldr	r1, [pc, #24]	; (8000358 <RCC_AHB1PeriphClockCmd+0x3c>)
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	43db      	mvns	r3, r3
 8000346:	4013      	ands	r3, r2
 8000348:	630b      	str	r3, [r1, #48]	; 0x30
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800

0800035c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	460b      	mov	r3, r1
 8000366:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000368:	78fb      	ldrb	r3, [r7, #3]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d006      	beq.n	800037c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800036e:	490a      	ldr	r1, [pc, #40]	; (8000398 <RCC_APB1PeriphClockCmd+0x3c>)
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <RCC_APB1PeriphClockCmd+0x3c>)
 8000372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4313      	orrs	r3, r2
 8000378:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800037a:	e006      	b.n	800038a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800037c:	4906      	ldr	r1, [pc, #24]	; (8000398 <RCC_APB1PeriphClockCmd+0x3c>)
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <RCC_APB1PeriphClockCmd+0x3c>)
 8000380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	43db      	mvns	r3, r3
 8000386:	4013      	ands	r3, r2
 8000388:	640b      	str	r3, [r1, #64]	; 0x40
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800

0800039c <I2C1_EV_IRQHandler>:
#include "i2c.h"

extern "C"{

	void I2C1_EV_IRQHandler(void)
	{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

	    I2CMaster::handlers[0]-> EV_handler();
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <I2C1_EV_IRQHandler+0x14>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f8c2 	bl	800052e <_ZN9I2CMaster10EV_handlerEv>

	}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000020 	.word	0x20000020

080003b4 <I2C1_ER_IRQHandler>:

	void I2C1_ER_IRQHandler(void)
	{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	    I2CMaster::handlers[0]-> ER_handler();
 80003b8:	4b03      	ldr	r3, [pc, #12]	; (80003c8 <I2C1_ER_IRQHandler+0x14>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f000 f933 	bl	8000628 <_ZN9I2CMaster10ER_handlerEv>

	}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000020 	.word	0x20000020

080003cc <_ZN9I2CMasterC1Em>:
}

I2CMaster::I2CMaster(I2C::BaseRegisterType baseRegister)
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
{
		I2CMaster::handlers[0] = this;
 80003d6:	4a1f      	ldr	r2, [pc, #124]	; (8000454 <_ZN9I2CMasterC1Em+0x88>)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6013      	str	r3, [r2, #0]

    	// Step 1: Initialize I2C
    	//Program the peripheral input clock in the I2C_CR2 register in order to generate the correct timings
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80003dc:	2101      	movs	r1, #1
 80003de:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80003e2:	f7ff ffbb 	bl	800035c <RCC_APB1PeriphClockCmd>

		clockControlRegister = baseRegister + I2C::ClockControlRegister::RegiserOffset;
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	f103 021c 	add.w	r2, r3, #28
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	601a      	str	r2, [r3, #0]
		controlRegister1 = baseRegister + I2C::ControlRegister1::RegisterOffset;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	605a      	str	r2, [r3, #4]
		controlRegister2 = baseRegister + I2C::ControlRegister2::RegisterOffset;
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	1d1a      	adds	r2, r3, #4
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	609a      	str	r2, [r3, #8]
		dataRegister = baseRegister + I2C::DataRegister::RegisterOffset;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	f103 0210 	add.w	r2, r3, #16
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	60da      	str	r2, [r3, #12]
		filterRegister = baseRegister + I2C::FilterRegister::RegisterOffset;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	611a      	str	r2, [r3, #16]
		ownAddressRegister = baseRegister + I2C::OwnAddressRegister::RegisterOffset;
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	f103 0208 	add.w	r2, r3, #8
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	615a      	str	r2, [r3, #20]
		ownAddressRegister2 = baseRegister + I2C::OwnAddressRegister2::RegisterOffset;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	f103 020c 	add.w	r2, r3, #12
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	619a      	str	r2, [r3, #24]
		statusRegister1 = baseRegister + I2C::StatusRegister1::RegisterOffset;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	f103 0214 	add.w	r2, r3, #20
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	61da      	str	r2, [r3, #28]
		statusRegister2 = baseRegister + I2C::StatusRegister2::RegisterOffset;
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	f103 0218 	add.w	r2, r3, #24
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	621a      	str	r2, [r3, #32]
		triseRegister = baseRegister + I2C::TRiseRegiser::RegisterOffset;
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	f103 0220 	add.w	r2, r3, #32
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	625a      	str	r2, [r3, #36]	; 0x24

		I2CMaster::init();
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f000 f807 	bl	8000458 <_ZN9I2CMaster4initEv>




}
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4618      	mov	r0, r3
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000020 	.word	0x20000020

08000458 <_ZN9I2CMaster4initEv>:

void I2CMaster::init()
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
    dynamic_access<I2C::BaseRegisterType, I2C::ControlRegister1Type>::reg_not(controlRegister1,
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	685b      	ldr	r3, [r3, #4]
    		I2C::ControlRegister1::SoftwareReset);
 8000464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f8ef 	bl	800064c <_ZN14dynamic_accessImtE7reg_notEmt>

    //set frequency bits
    dynamic_access<I2C::BaseRegisterType, I2C::ControlRegister2Type>::reg_or(controlRegister2, 0x10U);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	2110      	movs	r1, #16
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f8ff 	bl	8000678 <_ZN14dynamic_accessImtE6reg_orEmt>

    //configure the clock control registers
    dynamic_access<I2C::BaseRegisterType, I2C::ClockControlRegisterType>::reg_or(0x4000541CU, 0x50U);
 800047a:	2150      	movs	r1, #80	; 0x50
 800047c:	4810      	ldr	r0, [pc, #64]	; (80004c0 <_ZN9I2CMaster4initEv+0x68>)
 800047e:	f000 f8fb 	bl	8000678 <_ZN14dynamic_accessImtE6reg_orEmt>

    //configure the rise time register
    dynamic_access<I2C::BaseRegisterType, I2C::TRiseRegisterType>::reg_or(triseRegister, 0x11U);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000486:	2111      	movs	r1, #17
 8000488:	4618      	mov	r0, r3
 800048a:	f000 f8f5 	bl	8000678 <_ZN14dynamic_accessImtE6reg_orEmt>

    //program the I2C_CR1 register to enable the peripheral
    dynamic_access<I2C::BaseRegisterType, I2C::ControlRegister2Type>::reg_or(controlRegister2,
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	689b      	ldr	r3, [r3, #8]
    		I2C::ControlRegister2::BufferInterruptEnable |
			I2C::ControlRegister2::ErrorInterruptEnable |
			I2C::ControlRegister2::EventInterruptEnable);
 8000492:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000496:	4618      	mov	r0, r3
 8000498:	f000 f8ee 	bl	8000678 <_ZN14dynamic_accessImtE6reg_orEmt>



    dynamic_access<I2C::BaseRegisterType, uint16_t>::reg_or(controlRegister1,
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	685b      	ldr	r3, [r3, #4]
    		I2C::ControlRegister1::ACK);
 80004a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 f8e7 	bl	8000678 <_ZN14dynamic_accessImtE6reg_orEmt>

    dynamic_access<I2C::BaseRegisterType, I2C::ControlRegister1Type>::reg_or(controlRegister1,
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	685b      	ldr	r3, [r3, #4]
    		I2C::ControlRegister1::PeripheralEnable);
 80004ae:	2101      	movs	r1, #1
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 f8e1 	bl	8000678 <_ZN14dynamic_accessImtE6reg_orEmt>

}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	4000541c 	.word	0x4000541c

080004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>:

int I2CMaster::sendBytes(I2C::send_buffer_type sendBuffer, uint8_t address)
{
 80004c4:	b084      	sub	sp, #16
 80004c6:	b5b0      	push	{r4, r5, r7, lr}
 80004c8:	b082      	sub	sp, #8
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
 80004ce:	f107 001c 	add.w	r0, r7, #28
 80004d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	bytesSent = 0;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dataSent = false;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	send_buf = sendBuffer;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80004ec:	f107 051c 	add.w	r5, r7, #28
 80004f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f4:	682b      	ldr	r3, [r5, #0]
 80004f6:	7023      	strb	r3, [r4, #0]
	slaveAddress = address;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80004fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    dynamic_access<I2C::BaseRegisterType, uint16_t>::reg_or(controlRegister1,
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	685b      	ldr	r3, [r3, #4]
    		I2C::ControlRegister1::ACK);
 8000506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f8b4 	bl	8000678 <_ZN14dynamic_accessImtE6reg_orEmt>

	//Set Start Bit
	//0x40005400U
	dynamic_access<I2C::BaseRegisterType, I2C::ControlRegister1Type> ::reg_or(controlRegister1, I2C::ControlRegister1::Start);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f8ad 	bl	8000678 <_ZN14dynamic_accessImtE6reg_orEmt>




	return 1;
 800051e:	2301      	movs	r3, #1
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800052a:	b004      	add	sp, #16
 800052c:	4770      	bx	lr

0800052e <_ZN9I2CMaster10EV_handlerEv>:

void I2CMaster::EV_handler()
{
 800052e:	b590      	push	{r4, r7, lr}
 8000530:	b085      	sub	sp, #20
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]

	uint16_t status;
	uint16_t temp;

	//0x40005414
	status = dynamic_access<I2C::BaseRegisterType, uint16_t>::reg_get(statusRegister1);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f8b0 	bl	80006a0 <_ZN14dynamic_accessImtE7reg_getEm>
 8000540:	4603      	mov	r3, r0
 8000542:	81fb      	strh	r3, [r7, #14]
	reg_access<GPIOxRegisterType, GPIOxRegisterType, (GPIOxBaseRegisters::GPIO_B + RegisterOffsets::OutputDataRegisterOffset), stm32fxx::bits::BIT12>::reg_xor();
 8000544:	f000 f8ba 	bl	80006bc <_ZN10reg_accessImmLm1073873940ELm4096EE7reg_xorEv>

	 if(status & I2C::StatusRegister1::StartBit){
 8000548:	89fb      	ldrh	r3, [r7, #14]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	2b00      	cmp	r3, #0
 8000550:	d005      	beq.n	800055e <_ZN9I2CMaster10EV_handlerEv+0x30>

		 //send address
		 //0x40005410
		 dynamic_access<I2C::BaseRegisterType, uint16_t>::reg_set(dataRegister, 0xE0);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	21e0      	movs	r1, #224	; 0xe0
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f8bf 	bl	80006dc <_ZN14dynamic_accessImtE7reg_setEmt>

	 }

	if(status & I2C::StatusRegister1::Address){
 800055e:	89fb      	ldrh	r3, [r7, #14]
 8000560:	f003 0302 	and.w	r3, r3, #2
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00d      	beq.n	8000584 <_ZN9I2CMaster10EV_handlerEv+0x56>

		//read SR2
		//0x40005414
		status = dynamic_access<I2C::BaseRegisterType, uint16_t>::reg_get(statusRegister1);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	69db      	ldr	r3, [r3, #28]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f897 	bl	80006a0 <_ZN14dynamic_accessImtE7reg_getEm>
 8000572:	4603      	mov	r3, r0
 8000574:	81fb      	strh	r3, [r7, #14]

		//0x40005418
		temp = 	dynamic_access<I2C::BaseRegisterType, uint16_t>::reg_get(statusRegister2);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6a1b      	ldr	r3, [r3, #32]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f890 	bl	80006a0 <_ZN14dynamic_accessImtE7reg_getEm>
 8000580:	4603      	mov	r3, r0
 8000582:	81bb      	strh	r3, [r7, #12]

	}

	if((status & I2C::StatusRegister1::TransmitEmpty)){ 	//& (status & I2C::StatusRegister1::ByteTransferFinished)
 8000584:	89fb      	ldrh	r3, [r7, #14]
 8000586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058a:	2b00      	cmp	r3, #0
 800058c:	d048      	beq.n	8000620 <_ZN9I2CMaster10EV_handlerEv+0xf2>

		if((bytesSent <= 17) & (!dataSent)){
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000594:	2b11      	cmp	r3, #17
 8000596:	bfd4      	ite	le
 8000598:	2301      	movle	r3, #1
 800059a:	2300      	movgt	r3, #0
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80005a6:	f083 0301 	eor.w	r3, r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	4013      	ands	r3, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d019      	beq.n	80005e6 <_ZN9I2CMaster10EV_handlerEv+0xb8>

			//0x40005410
			dynamic_access<I2C::BaseRegisterType, uint8_t>::reg_set(dataRegister, send_buf[bytesSent]);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68dc      	ldr	r4, [r3, #12]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80005c2:	4619      	mov	r1, r3
 80005c4:	4610      	mov	r0, r2
 80005c6:	f000 f8b5 	bl	8000734 <_ZNSt5arrayIhLj17EEixEj>
 80005ca:	4603      	mov	r3, r0
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4620      	mov	r0, r4
 80005d2:	f000 f892 	bl	80006fa <_ZN14dynamic_accessImhE7reg_setEmh>
			bytesSent++;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80005dc:	3301      	adds	r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

		}

		if((bytesSent > 17) & (!dataSent)){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80005ec:	2b11      	cmp	r3, #17
 80005ee:	bfcc      	ite	gt
 80005f0:	2301      	movgt	r3, #1
 80005f2:	2300      	movle	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80005fe:	f083 0301 	eor.w	r3, r3, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	4013      	ands	r3, r2
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00a      	beq.n	8000620 <_ZN9I2CMaster10EV_handlerEv+0xf2>

			dataSent = true;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
			//0x40005400
			dynamic_access<I2C::BaseRegisterType, uint16_t>::reg_or(I2CMaster::controlRegister1, I2C::ControlRegister1::Stop);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f82c 	bl	8000678 <_ZN14dynamic_accessImtE6reg_orEmt>

		}
	}


}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}

08000628 <_ZN9I2CMaster10ER_handlerEv>:

void I2CMaster::ER_handler()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]

	dynamic_access<I2C::BaseRegisterType, I2C::ControlRegister1Type>::reg_or(I2CMaster::controlRegister1, I2C::ControlRegister1::SoftwareReset);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f81d 	bl	8000678 <_ZN14dynamic_accessImtE6reg_orEmt>
	I2CMaster::init();
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff0a 	bl	8000458 <_ZN9I2CMaster4initEv>

}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_ZN14dynamic_accessImtE7reg_notEmt>:
                    reg_get(const register_address_type address) { return *reinterpret_cast<volatile register_value_type*>(address); }

        static void reg_set(const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address)  = value; }
        static void reg_and(const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address) &= value; }
        static void reg_or (const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address) |= value; }
        static void reg_not(const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address) &= register_value_type(~value); }
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	8812      	ldrh	r2, [r2, #0]
 800065e:	b291      	uxth	r1, r2
 8000660:	887a      	ldrh	r2, [r7, #2]
 8000662:	43d2      	mvns	r2, r2
 8000664:	b292      	uxth	r2, r2
 8000666:	400a      	ands	r2, r1
 8000668:	b292      	uxth	r2, r2
 800066a:	801a      	strh	r2, [r3, #0]
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <_ZN14dynamic_accessImtE6reg_orEmt>:
        static void reg_or (const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address) |= value; }
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	807b      	strh	r3, [r7, #2]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	8812      	ldrh	r2, [r2, #0]
 800068a:	b291      	uxth	r1, r2
 800068c:	887a      	ldrh	r2, [r7, #2]
 800068e:	430a      	orrs	r2, r1
 8000690:	b292      	uxth	r2, r2
 8000692:	801a      	strh	r2, [r3, #0]
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <_ZN14dynamic_accessImtE7reg_getEm>:
                    reg_get(const register_address_type address) { return *reinterpret_cast<volatile register_value_type*>(address); }
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <_ZN10reg_accessImmLm1073873940ELm4096EE7reg_xorEv>:

        *reinterpret_cast<volatile reg_type*>(address) |= value;

    }

    static void reg_xor()
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
    {

        *reinterpret_cast<volatile reg_type*>(address) ^= value;
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <_ZN10reg_accessImmLm1073873940ELm4096EE7reg_xorEv+0x1c>)
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <_ZN10reg_accessImmLm1073873940ELm4096EE7reg_xorEv+0x1c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80006ca:	6013      	str	r3, [r2, #0]

    }
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40020414 	.word	0x40020414

080006dc <_ZN14dynamic_accessImtE7reg_setEmt>:
        static void reg_set(const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address)  = value; }
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	807b      	strh	r3, [r7, #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	887a      	ldrh	r2, [r7, #2]
 80006ec:	801a      	strh	r2, [r3, #0]
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <_ZN14dynamic_accessImhE7reg_setEmh>:
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	460b      	mov	r3, r1
 8000704:	70fb      	strb	r3, [r7, #3]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	78fa      	ldrb	r2, [r7, #3]
 800070a:	701a      	strb	r2, [r3, #0]
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <_ZNSt14__array_traitsIhLj17EE6_S_refERA17_Khj>:
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <_ZNSt5arrayIhLj17EEixEj>:
      constexpr bool 
      empty() const noexcept { return size() == 0; }

      // Element access.
      reference
      operator[](size_type __n) noexcept
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6839      	ldr	r1, [r7, #0]
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ffe8 	bl	8000718 <_ZNSt14__array_traitsIhLj17EE6_S_refERA17_Khj>
 8000748:	4603      	mov	r3, r0
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800075e:	4909      	ldr	r1, [pc, #36]	; (8000784 <NVIC_EnableIRQ+0x30>)
 8000760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000764:	095b      	lsrs	r3, r3, #5
 8000766:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800076a:	f002 021f 	and.w	r2, r2, #31
 800076e:	2001      	movs	r0, #1
 8000770:	fa00 f202 	lsl.w	r2, r0, r2
 8000774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100

08000788 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	da0d      	bge.n	80007b8 <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800079c:	490f      	ldr	r1, [pc, #60]	; (80007dc <NVIC_SetPriority+0x54>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	f003 030f 	and.w	r3, r3, #15
 80007a8:	3b04      	subs	r3, #4
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	0112      	lsls	r2, r2, #4
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	440b      	add	r3, r1
 80007b4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80007b6:	e00b      	b.n	80007d0 <NVIC_SetPriority+0x48>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80007b8:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <NVIC_SetPriority+0x58>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	4618      	mov	r0, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	b2d9      	uxtb	r1, r3
 80007c8:	1813      	adds	r3, r2, r0
 80007ca:	460a      	mov	r2, r1
 80007cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000ed00 	.word	0xe000ed00
 80007e0:	e000e100 	.word	0xe000e100

080007e4 <EXTI0_IRQHandler>:


extern "C"
{
	void EXTI0_IRQHandler(void)
	{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
		// Checks whether the interrupt from EXTI0 or not
		if (EXTI_GetITStatus(EXTI_Line0))
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff fd63 	bl	80002b4 <EXTI_GetITStatus>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	bf14      	ite	ne
 80007f4:	2301      	movne	r3, #1
 80007f6:	2300      	moveq	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d008      	beq.n	8000810 <EXTI0_IRQHandler+0x2c>
		{
			buttonPressed= true;
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <EXTI0_IRQHandler+0x30>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
			Delay(0xFFFFF);
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <EXTI0_IRQHandler+0x34>)
 8000806:	f000 fb9b 	bl	8000f40 <_Z5Delaym>
			// Clears the EXTI line pending bit
			EXTI_ClearITPendingBit(EXTI_Line0);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff fd76 	bl	80002fc <EXTI_ClearITPendingBit>
		}
	}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000001c 	.word	0x2000001c
 8000818:	000fffff 	.word	0x000fffff

0800081c <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 800081c:	b5b0      	push	{r4, r5, r7, lr}
 800081e:	b0ac      	sub	sp, #176	; 0xb0
 8000820:	af04      	add	r7, sp, #16

  int i = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  buttonPressed = false;
 8000828:	4bc3      	ldr	r3, [pc, #780]	; (8000b38 <main+0x31c>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]

  Delay(0xFFFFF);
 800082e:	48c3      	ldr	r0, [pc, #780]	; (8000b3c <main+0x320>)
 8000830:	f000 fb86 	bl	8000f40 <_Z5Delaym>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000834:	2101      	movs	r1, #1
 8000836:	2002      	movs	r0, #2
 8000838:	f7ff fd70 	bl	800031c <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800083c:	2101      	movs	r1, #1
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff fd6c 	bl	800031c <RCC_AHB1PeriphClockCmd>


  SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PA;
 8000844:	4bbe      	ldr	r3, [pc, #760]	; (8000b40 <main+0x324>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]

  EXTI->IMR |= EXTI_IMR_MR0;
 800084a:	4abe      	ldr	r2, [pc, #760]	; (8000b44 <main+0x328>)
 800084c:	4bbd      	ldr	r3, [pc, #756]	; (8000b44 <main+0x328>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6013      	str	r3, [r2, #0]
  EXTI->RTSR |= EXTI_RTSR_TR0;
 8000856:	4abb      	ldr	r2, [pc, #748]	; (8000b44 <main+0x328>)
 8000858:	4bba      	ldr	r3, [pc, #744]	; (8000b44 <main+0x328>)
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6093      	str	r3, [r2, #8]

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8000862:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000866:	f7ff fcaf 	bl	80001c8 <NVIC_PriorityGroupConfig>

  NVIC_InitTypeDef NVIC_InitStructure;

  NVIC_InitStructure.NVIC_IRQChannel = I2C1_EV_IRQn; //TIM4 IRQ Channel
 800086a:	231f      	movs	r3, #31
 800086c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;//Preemption Priority
 8000870:	2300      	movs	r3, #0
 8000872:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; //Sub Priority
 8000876:	2300      	movs	r3, #0
 8000878:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800087c:	2301      	movs	r3, #1
 800087e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  NVIC_Init(&NVIC_InitStructure);
 8000882:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fcb2 	bl	80001f0 <NVIC_Init>

  NVIC_InitTypeDef NVIC_InitStructure2;

  NVIC_InitStructure2.NVIC_IRQChannel = I2C1_ER_IRQn; //TIM4 IRQ Channel
 800088c:	2320      	movs	r3, #32
 800088e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  NVIC_InitStructure2.NVIC_IRQChannelPreemptionPriority = 0;//Preemption Priority
 8000892:	2300      	movs	r3, #0
 8000894:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  NVIC_InitStructure2.NVIC_IRQChannelSubPriority = 0; //Sub Priority
 8000898:	2300      	movs	r3, #0
 800089a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  NVIC_InitStructure2.NVIC_IRQChannelCmd = ENABLE;
 800089e:	2301      	movs	r3, #1
 80008a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  NVIC_Init(&NVIC_InitStructure2);
 80008a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fca1 	bl	80001f0 <NVIC_Init>

  NVIC_EnableIRQ(EXTI0_IRQn);
 80008ae:	2006      	movs	r0, #6
 80008b0:	f7ff ff50 	bl	8000754 <NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI0_IRQn, 0);
 80008b4:	2100      	movs	r1, #0
 80008b6:	2006      	movs	r0, #6
 80008b8:	f7ff ff66 	bl	8000788 <NVIC_SetPriority>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80008bc:	b662      	cpsie	i
  	  PINS::PIN12,
  	  GpioModes::Output,
  	  OutputTypes::PushPull,
  	  OutputSpeed::MediumSpeed,
  	  PullUpPullDown::NoPullUpPullDown,
  	  AlternateFunction::AF0>greenLED;
 80008be:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 fb52 	bl	8000f6c <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev>
  	  PINS::PIN13,
	  GpioModes::Input,
	  OutputTypes::PushPull,
	  OutputSpeed::MediumSpeed,
	  PullUpPullDown::NoPullUpPullDown,
	  AlternateFunction::AF0>buttonPin;
 80008c8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fb83 	bl	8000fd8 <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev>
  	  PINS::PIN6,
  	  GpioModes::AlternateFunction,
  	  OutputTypes::OpenDrain,
  	  OutputSpeed::HighSpeed,
  	  PullUpPullDown::NoPullUpPullDown,
  	  AlternateFunction::AF4>sdaPin;
 80008d2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fbb2 	bl	8001040 <_ZN4GPIOILm1073873920ELm7ELm2ELm1ELm2ELm0ELm4EEC1Ev>
  	  PINS::PIN7,
  	  GpioModes::AlternateFunction,
  	  OutputTypes::OpenDrain,
  	  OutputSpeed::HighSpeed,
  	  PullUpPullDown::NoPullUpPullDown,
  	  AlternateFunction::AF4>sclPin;
 80008dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fbe3 	bl	80010ac <_ZN4GPIOILm1073873920ELm8ELm2ELm1ELm2ELm0ELm4EEC1Ev>
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
  I2C::send_buffer_type osc_on = {0x21, 0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 80008e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	741a      	strb	r2, [r3, #16]
 80008f6:	2321      	movs	r3, #33	; 0x21
 80008f8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  i2c.sendBytes(osc_on, 0x070);
 80008fc:	2370      	movs	r3, #112	; 0x70
 80008fe:	9302      	str	r3, [sp, #8]
 8000900:	466b      	mov	r3, sp
 8000902:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090a:	6018      	str	r0, [r3, #0]
 800090c:	3304      	adds	r3, #4
 800090e:	7019      	strb	r1, [r3, #0]
 8000910:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000916:	488c      	ldr	r0, [pc, #560]	; (8000b48 <main+0x32c>)
 8000918:	f7ff fdd4 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

  Delay(0xFFFFF);
 800091c:	4887      	ldr	r0, [pc, #540]	; (8000b3c <main+0x320>)
 800091e:	f000 fb0f 	bl	8000f40 <_Z5Delaym>
  I2C::send_buffer_type no_blink = {0x81, 0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000922:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	741a      	strb	r2, [r3, #16]
 8000932:	2381      	movs	r3, #129	; 0x81
 8000934:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  i2c.sendBytes(no_blink, 0x070);
 8000938:	2370      	movs	r3, #112	; 0x70
 800093a:	9302      	str	r3, [sp, #8]
 800093c:	466b      	mov	r3, sp
 800093e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000942:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000946:	6018      	str	r0, [r3, #0]
 8000948:	3304      	adds	r3, #4
 800094a:	7019      	strb	r1, [r3, #0]
 800094c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000952:	487d      	ldr	r0, [pc, #500]	; (8000b48 <main+0x32c>)
 8000954:	f7ff fdb6 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

  Delay(0xFFFFF);
 8000958:	4878      	ldr	r0, [pc, #480]	; (8000b3c <main+0x320>)
 800095a:	f000 faf1 	bl	8000f40 <_Z5Delaym>
  I2C::send_buffer_type brightness = {0xEF, 0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 800095e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	741a      	strb	r2, [r3, #16]
 800096e:	23ef      	movs	r3, #239	; 0xef
 8000970:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  i2c.sendBytes(brightness, 0x070);
 8000974:	2370      	movs	r3, #112	; 0x70
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	466b      	mov	r3, sp
 800097a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800097e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000982:	6018      	str	r0, [r3, #0]
 8000984:	3304      	adds	r3, #4
 8000986:	7019      	strb	r1, [r3, #0]
 8000988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800098c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800098e:	486e      	ldr	r0, [pc, #440]	; (8000b48 <main+0x32c>)
 8000990:	f7ff fd98 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

  Delay(0xFFFFF);
 8000994:	4869      	ldr	r0, [pc, #420]	; (8000b3c <main+0x320>)
 8000996:	f000 fad3 	bl	8000f40 <_Z5Delaym>
  I2C::send_buffer_type all_on = {0x00, 0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00};
 800099a:	4b6c      	ldr	r3, [pc, #432]	; (8000b4c <main+0x330>)
 800099c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80009a0:	461d      	mov	r5, r3
 80009a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009a6:	682b      	ldr	r3, [r5, #0]
 80009a8:	7023      	strb	r3, [r4, #0]
  i2c.sendBytes(all_on, 0x070);
 80009aa:	2370      	movs	r3, #112	; 0x70
 80009ac:	9302      	str	r3, [sp, #8]
 80009ae:	466b      	mov	r3, sp
 80009b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80009b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b8:	6018      	str	r0, [r3, #0]
 80009ba:	3304      	adds	r3, #4
 80009bc:	7019      	strb	r1, [r3, #0]
 80009be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009c4:	4860      	ldr	r0, [pc, #384]	; (8000b48 <main+0x32c>)
 80009c6:	f7ff fd7d 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

  Delay(0xFFFFF);
 80009ca:	485c      	ldr	r0, [pc, #368]	; (8000b3c <main+0x320>)
 80009cc:	f000 fab8 	bl	8000f40 <_Z5Delaym>
  const std::array<uint8_t, 17> all_off = {0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 80009d0:	f107 0318 	add.w	r3, r7, #24
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	741a      	strb	r2, [r3, #16]
  i2c.sendBytes(all_off, 0x070);
 80009e0:	2370      	movs	r3, #112	; 0x70
 80009e2:	9302      	str	r3, [sp, #8]
 80009e4:	466b      	mov	r3, sp
 80009e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ee:	6018      	str	r0, [r3, #0]
 80009f0:	3304      	adds	r3, #4
 80009f2:	7019      	strb	r1, [r3, #0]
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009fa:	4853      	ldr	r0, [pc, #332]	; (8000b48 <main+0x32c>)
 80009fc:	f7ff fd62 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

  Delay(0xFFFFF);
 8000a00:	484e      	ldr	r0, [pc, #312]	; (8000b3c <main+0x320>)
 8000a02:	f000 fa9d 	bl	8000f40 <_Z5Delaym>
  const std::array<uint8_t, 17> testA = {0x00, 0x7F,0x00,0x88,0x00,0x88,0x00,0x88,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000a06:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <main+0x334>)
 8000a08:	1d3c      	adds	r4, r7, #4
 8000a0a:	461d      	mov	r5, r3
 8000a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a10:	682b      	ldr	r3, [r5, #0]
 8000a12:	7023      	strb	r3, [r4, #0]
  i2c.sendBytes(testA, 0x070);
 8000a14:	2370      	movs	r3, #112	; 0x70
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	466b      	mov	r3, sp
 8000a1a:	f107 0210 	add.w	r2, r7, #16
 8000a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a22:	6018      	str	r0, [r3, #0]
 8000a24:	3304      	adds	r3, #4
 8000a26:	7019      	strb	r1, [r3, #0]
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a2c:	4846      	ldr	r0, [pc, #280]	; (8000b48 <main+0x32c>)
 8000a2e:	f7ff fd49 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

  bool panelOn = false;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
  int displayAddress = 0x70;
 8000a38:	2370      	movs	r3, #112	; 0x70
 8000a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  /* Infinite loop */
  while (1)
  {
	  Delay(0xFFFFF);
 8000a3e:	483f      	ldr	r0, [pc, #252]	; (8000b3c <main+0x320>)
 8000a40:	f000 fa7e 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::A, displayAddress);
 8000a44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4a42      	ldr	r2, [pc, #264]	; (8000b54 <main+0x338>)
 8000a4c:	9302      	str	r3, [sp, #8]
 8000a4e:	466b      	mov	r3, sp
 8000a50:	f102 010c 	add.w	r1, r2, #12
 8000a54:	c903      	ldmia	r1, {r0, r1}
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	7019      	strb	r1, [r3, #0]
 8000a5c:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000a5e:	483a      	ldr	r0, [pc, #232]	; (8000b48 <main+0x32c>)
 8000a60:	f7ff fd30 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

	  Delay(0xFFFFF);
 8000a64:	4835      	ldr	r0, [pc, #212]	; (8000b3c <main+0x320>)
 8000a66:	f000 fa6b 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::B, displayAddress);
 8000a6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4a39      	ldr	r2, [pc, #228]	; (8000b58 <main+0x33c>)
 8000a72:	9302      	str	r3, [sp, #8]
 8000a74:	466b      	mov	r3, sp
 8000a76:	f102 010c 	add.w	r1, r2, #12
 8000a7a:	c903      	ldmia	r1, {r0, r1}
 8000a7c:	6018      	str	r0, [r3, #0]
 8000a7e:	3304      	adds	r3, #4
 8000a80:	7019      	strb	r1, [r3, #0]
 8000a82:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000a84:	4830      	ldr	r0, [pc, #192]	; (8000b48 <main+0x32c>)
 8000a86:	f7ff fd1d 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000a8a:	482c      	ldr	r0, [pc, #176]	; (8000b3c <main+0x320>)
 8000a8c:	f000 fa58 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::C, displayAddress);
 8000a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <main+0x340>)
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	466b      	mov	r3, sp
 8000a9c:	f102 010c 	add.w	r1, r2, #12
 8000aa0:	c903      	ldmia	r1, {r0, r1}
 8000aa2:	6018      	str	r0, [r3, #0]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	7019      	strb	r1, [r3, #0]
 8000aa8:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000aaa:	4827      	ldr	r0, [pc, #156]	; (8000b48 <main+0x32c>)
 8000aac:	f7ff fd0a 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000ab0:	4822      	ldr	r0, [pc, #136]	; (8000b3c <main+0x320>)
 8000ab2:	f000 fa45 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::D, displayAddress);
 8000ab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <main+0x344>)
 8000abe:	9302      	str	r3, [sp, #8]
 8000ac0:	466b      	mov	r3, sp
 8000ac2:	f102 010c 	add.w	r1, r2, #12
 8000ac6:	c903      	ldmia	r1, {r0, r1}
 8000ac8:	6018      	str	r0, [r3, #0]
 8000aca:	3304      	adds	r3, #4
 8000acc:	7019      	strb	r1, [r3, #0]
 8000ace:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000ad0:	481d      	ldr	r0, [pc, #116]	; (8000b48 <main+0x32c>)
 8000ad2:	f7ff fcf7 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000ad6:	4819      	ldr	r0, [pc, #100]	; (8000b3c <main+0x320>)
 8000ad8:	f000 fa32 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::E, displayAddress);
 8000adc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4a20      	ldr	r2, [pc, #128]	; (8000b64 <main+0x348>)
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	466b      	mov	r3, sp
 8000ae8:	f102 010c 	add.w	r1, r2, #12
 8000aec:	c903      	ldmia	r1, {r0, r1}
 8000aee:	6018      	str	r0, [r3, #0]
 8000af0:	3304      	adds	r3, #4
 8000af2:	7019      	strb	r1, [r3, #0]
 8000af4:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <main+0x32c>)
 8000af8:	f7ff fce4 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000afc:	480f      	ldr	r0, [pc, #60]	; (8000b3c <main+0x320>)
 8000afe:	f000 fa1f 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::F, displayAddress);
 8000b02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <main+0x34c>)
 8000b0a:	9302      	str	r3, [sp, #8]
 8000b0c:	466b      	mov	r3, sp
 8000b0e:	f102 010c 	add.w	r1, r2, #12
 8000b12:	c903      	ldmia	r1, {r0, r1}
 8000b14:	6018      	str	r0, [r3, #0]
 8000b16:	3304      	adds	r3, #4
 8000b18:	7019      	strb	r1, [r3, #0]
 8000b1a:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000b1c:	480a      	ldr	r0, [pc, #40]	; (8000b48 <main+0x32c>)
 8000b1e:	f7ff fcd1 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <main+0x320>)
 8000b24:	f000 fa0c 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::G, displayAddress);
 8000b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <main+0x350>)
 8000b30:	9302      	str	r3, [sp, #8]
 8000b32:	466b      	mov	r3, sp
 8000b34:	e01c      	b.n	8000b70 <main+0x354>
 8000b36:	bf00      	nop
 8000b38:	2000001c 	.word	0x2000001c
 8000b3c:	000fffff 	.word	0x000fffff
 8000b40:	40013800 	.word	0x40013800
 8000b44:	40013c00 	.word	0x40013c00
 8000b48:	20000024 	.word	0x20000024
 8000b4c:	08001480 	.word	0x08001480
 8000b50:	08001494 	.word	0x08001494
 8000b54:	080014a8 	.word	0x080014a8
 8000b58:	080014bc 	.word	0x080014bc
 8000b5c:	080014d0 	.word	0x080014d0
 8000b60:	080014e4 	.word	0x080014e4
 8000b64:	080014f8 	.word	0x080014f8
 8000b68:	0800150c 	.word	0x0800150c
 8000b6c:	08001520 	.word	0x08001520
 8000b70:	f102 010c 	add.w	r1, r2, #12
 8000b74:	c903      	ldmia	r1, {r0, r1}
 8000b76:	6018      	str	r0, [r3, #0]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	7019      	strb	r1, [r3, #0]
 8000b7c:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000b7e:	48b3      	ldr	r0, [pc, #716]	; (8000e4c <main+0x630>)
 8000b80:	f7ff fca0 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000b84:	48b2      	ldr	r0, [pc, #712]	; (8000e50 <main+0x634>)
 8000b86:	f000 f9db 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::H, displayAddress);
 8000b8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4ab0      	ldr	r2, [pc, #704]	; (8000e54 <main+0x638>)
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	466b      	mov	r3, sp
 8000b96:	f102 010c 	add.w	r1, r2, #12
 8000b9a:	c903      	ldmia	r1, {r0, r1}
 8000b9c:	6018      	str	r0, [r3, #0]
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	7019      	strb	r1, [r3, #0]
 8000ba2:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000ba4:	48a9      	ldr	r0, [pc, #676]	; (8000e4c <main+0x630>)
 8000ba6:	f7ff fc8d 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000baa:	48a9      	ldr	r0, [pc, #676]	; (8000e50 <main+0x634>)
 8000bac:	f000 f9c8 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::I, displayAddress);
 8000bb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4aa8      	ldr	r2, [pc, #672]	; (8000e58 <main+0x63c>)
 8000bb8:	9302      	str	r3, [sp, #8]
 8000bba:	466b      	mov	r3, sp
 8000bbc:	f102 010c 	add.w	r1, r2, #12
 8000bc0:	c903      	ldmia	r1, {r0, r1}
 8000bc2:	6018      	str	r0, [r3, #0]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	7019      	strb	r1, [r3, #0]
 8000bc8:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000bca:	48a0      	ldr	r0, [pc, #640]	; (8000e4c <main+0x630>)
 8000bcc:	f7ff fc7a 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000bd0:	489f      	ldr	r0, [pc, #636]	; (8000e50 <main+0x634>)
 8000bd2:	f000 f9b5 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::J, displayAddress);
 8000bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4a9f      	ldr	r2, [pc, #636]	; (8000e5c <main+0x640>)
 8000bde:	9302      	str	r3, [sp, #8]
 8000be0:	466b      	mov	r3, sp
 8000be2:	f102 010c 	add.w	r1, r2, #12
 8000be6:	c903      	ldmia	r1, {r0, r1}
 8000be8:	6018      	str	r0, [r3, #0]
 8000bea:	3304      	adds	r3, #4
 8000bec:	7019      	strb	r1, [r3, #0]
 8000bee:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000bf0:	4896      	ldr	r0, [pc, #600]	; (8000e4c <main+0x630>)
 8000bf2:	f7ff fc67 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000bf6:	4896      	ldr	r0, [pc, #600]	; (8000e50 <main+0x634>)
 8000bf8:	f000 f9a2 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::K, displayAddress);
 8000bfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4a97      	ldr	r2, [pc, #604]	; (8000e60 <main+0x644>)
 8000c04:	9302      	str	r3, [sp, #8]
 8000c06:	466b      	mov	r3, sp
 8000c08:	f102 010c 	add.w	r1, r2, #12
 8000c0c:	c903      	ldmia	r1, {r0, r1}
 8000c0e:	6018      	str	r0, [r3, #0]
 8000c10:	3304      	adds	r3, #4
 8000c12:	7019      	strb	r1, [r3, #0]
 8000c14:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000c16:	488d      	ldr	r0, [pc, #564]	; (8000e4c <main+0x630>)
 8000c18:	f7ff fc54 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000c1c:	488c      	ldr	r0, [pc, #560]	; (8000e50 <main+0x634>)
 8000c1e:	f000 f98f 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::L, displayAddress);
 8000c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4a8e      	ldr	r2, [pc, #568]	; (8000e64 <main+0x648>)
 8000c2a:	9302      	str	r3, [sp, #8]
 8000c2c:	466b      	mov	r3, sp
 8000c2e:	f102 010c 	add.w	r1, r2, #12
 8000c32:	c903      	ldmia	r1, {r0, r1}
 8000c34:	6018      	str	r0, [r3, #0]
 8000c36:	3304      	adds	r3, #4
 8000c38:	7019      	strb	r1, [r3, #0]
 8000c3a:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000c3c:	4883      	ldr	r0, [pc, #524]	; (8000e4c <main+0x630>)
 8000c3e:	f7ff fc41 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000c42:	4883      	ldr	r0, [pc, #524]	; (8000e50 <main+0x634>)
 8000c44:	f000 f97c 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::M, displayAddress);
 8000c48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4a86      	ldr	r2, [pc, #536]	; (8000e68 <main+0x64c>)
 8000c50:	9302      	str	r3, [sp, #8]
 8000c52:	466b      	mov	r3, sp
 8000c54:	f102 010c 	add.w	r1, r2, #12
 8000c58:	c903      	ldmia	r1, {r0, r1}
 8000c5a:	6018      	str	r0, [r3, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	7019      	strb	r1, [r3, #0]
 8000c60:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000c62:	487a      	ldr	r0, [pc, #488]	; (8000e4c <main+0x630>)
 8000c64:	f7ff fc2e 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000c68:	4879      	ldr	r0, [pc, #484]	; (8000e50 <main+0x634>)
 8000c6a:	f000 f969 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::N, displayAddress);
 8000c6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4a7d      	ldr	r2, [pc, #500]	; (8000e6c <main+0x650>)
 8000c76:	9302      	str	r3, [sp, #8]
 8000c78:	466b      	mov	r3, sp
 8000c7a:	f102 010c 	add.w	r1, r2, #12
 8000c7e:	c903      	ldmia	r1, {r0, r1}
 8000c80:	6018      	str	r0, [r3, #0]
 8000c82:	3304      	adds	r3, #4
 8000c84:	7019      	strb	r1, [r3, #0]
 8000c86:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000c88:	4870      	ldr	r0, [pc, #448]	; (8000e4c <main+0x630>)
 8000c8a:	f7ff fc1b 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000c8e:	4870      	ldr	r0, [pc, #448]	; (8000e50 <main+0x634>)
 8000c90:	f000 f956 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::O, displayAddress);
 8000c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4a75      	ldr	r2, [pc, #468]	; (8000e70 <main+0x654>)
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	466b      	mov	r3, sp
 8000ca0:	f102 010c 	add.w	r1, r2, #12
 8000ca4:	c903      	ldmia	r1, {r0, r1}
 8000ca6:	6018      	str	r0, [r3, #0]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	7019      	strb	r1, [r3, #0]
 8000cac:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000cae:	4867      	ldr	r0, [pc, #412]	; (8000e4c <main+0x630>)
 8000cb0:	f7ff fc08 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000cb4:	4866      	ldr	r0, [pc, #408]	; (8000e50 <main+0x634>)
 8000cb6:	f000 f943 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::P, displayAddress);
 8000cba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	4a6c      	ldr	r2, [pc, #432]	; (8000e74 <main+0x658>)
 8000cc2:	9302      	str	r3, [sp, #8]
 8000cc4:	466b      	mov	r3, sp
 8000cc6:	f102 010c 	add.w	r1, r2, #12
 8000cca:	c903      	ldmia	r1, {r0, r1}
 8000ccc:	6018      	str	r0, [r3, #0]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	7019      	strb	r1, [r3, #0]
 8000cd2:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000cd4:	485d      	ldr	r0, [pc, #372]	; (8000e4c <main+0x630>)
 8000cd6:	f7ff fbf5 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000cda:	485d      	ldr	r0, [pc, #372]	; (8000e50 <main+0x634>)
 8000cdc:	f000 f930 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::Q, displayAddress);
 8000ce0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4a64      	ldr	r2, [pc, #400]	; (8000e78 <main+0x65c>)
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	466b      	mov	r3, sp
 8000cec:	f102 010c 	add.w	r1, r2, #12
 8000cf0:	c903      	ldmia	r1, {r0, r1}
 8000cf2:	6018      	str	r0, [r3, #0]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	7019      	strb	r1, [r3, #0]
 8000cf8:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000cfa:	4854      	ldr	r0, [pc, #336]	; (8000e4c <main+0x630>)
 8000cfc:	f7ff fbe2 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000d00:	4853      	ldr	r0, [pc, #332]	; (8000e50 <main+0x634>)
 8000d02:	f000 f91d 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::R, displayAddress);
 8000d06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4a5b      	ldr	r2, [pc, #364]	; (8000e7c <main+0x660>)
 8000d0e:	9302      	str	r3, [sp, #8]
 8000d10:	466b      	mov	r3, sp
 8000d12:	f102 010c 	add.w	r1, r2, #12
 8000d16:	c903      	ldmia	r1, {r0, r1}
 8000d18:	6018      	str	r0, [r3, #0]
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	7019      	strb	r1, [r3, #0]
 8000d1e:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000d20:	484a      	ldr	r0, [pc, #296]	; (8000e4c <main+0x630>)
 8000d22:	f7ff fbcf 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000d26:	484a      	ldr	r0, [pc, #296]	; (8000e50 <main+0x634>)
 8000d28:	f000 f90a 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::S, displayAddress);
 8000d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	4a53      	ldr	r2, [pc, #332]	; (8000e80 <main+0x664>)
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	466b      	mov	r3, sp
 8000d38:	f102 010c 	add.w	r1, r2, #12
 8000d3c:	c903      	ldmia	r1, {r0, r1}
 8000d3e:	6018      	str	r0, [r3, #0]
 8000d40:	3304      	adds	r3, #4
 8000d42:	7019      	strb	r1, [r3, #0]
 8000d44:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000d46:	4841      	ldr	r0, [pc, #260]	; (8000e4c <main+0x630>)
 8000d48:	f7ff fbbc 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000d4c:	4840      	ldr	r0, [pc, #256]	; (8000e50 <main+0x634>)
 8000d4e:	f000 f8f7 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::T, displayAddress);
 8000d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4a4a      	ldr	r2, [pc, #296]	; (8000e84 <main+0x668>)
 8000d5a:	9302      	str	r3, [sp, #8]
 8000d5c:	466b      	mov	r3, sp
 8000d5e:	f102 010c 	add.w	r1, r2, #12
 8000d62:	c903      	ldmia	r1, {r0, r1}
 8000d64:	6018      	str	r0, [r3, #0]
 8000d66:	3304      	adds	r3, #4
 8000d68:	7019      	strb	r1, [r3, #0]
 8000d6a:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000d6c:	4837      	ldr	r0, [pc, #220]	; (8000e4c <main+0x630>)
 8000d6e:	f7ff fba9 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000d72:	4837      	ldr	r0, [pc, #220]	; (8000e50 <main+0x634>)
 8000d74:	f000 f8e4 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::U, displayAddress);
 8000d78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4a42      	ldr	r2, [pc, #264]	; (8000e88 <main+0x66c>)
 8000d80:	9302      	str	r3, [sp, #8]
 8000d82:	466b      	mov	r3, sp
 8000d84:	f102 010c 	add.w	r1, r2, #12
 8000d88:	c903      	ldmia	r1, {r0, r1}
 8000d8a:	6018      	str	r0, [r3, #0]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	7019      	strb	r1, [r3, #0]
 8000d90:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000d92:	482e      	ldr	r0, [pc, #184]	; (8000e4c <main+0x630>)
 8000d94:	f7ff fb96 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000d98:	482d      	ldr	r0, [pc, #180]	; (8000e50 <main+0x634>)
 8000d9a:	f000 f8d1 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::V, displayAddress);
 8000d9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4a39      	ldr	r2, [pc, #228]	; (8000e8c <main+0x670>)
 8000da6:	9302      	str	r3, [sp, #8]
 8000da8:	466b      	mov	r3, sp
 8000daa:	f102 010c 	add.w	r1, r2, #12
 8000dae:	c903      	ldmia	r1, {r0, r1}
 8000db0:	6018      	str	r0, [r3, #0]
 8000db2:	3304      	adds	r3, #4
 8000db4:	7019      	strb	r1, [r3, #0]
 8000db6:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000db8:	4824      	ldr	r0, [pc, #144]	; (8000e4c <main+0x630>)
 8000dba:	f7ff fb83 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000dbe:	4824      	ldr	r0, [pc, #144]	; (8000e50 <main+0x634>)
 8000dc0:	f000 f8be 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::W, displayAddress);
 8000dc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <main+0x674>)
 8000dcc:	9302      	str	r3, [sp, #8]
 8000dce:	466b      	mov	r3, sp
 8000dd0:	f102 010c 	add.w	r1, r2, #12
 8000dd4:	c903      	ldmia	r1, {r0, r1}
 8000dd6:	6018      	str	r0, [r3, #0]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	7019      	strb	r1, [r3, #0]
 8000ddc:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000dde:	481b      	ldr	r0, [pc, #108]	; (8000e4c <main+0x630>)
 8000de0:	f7ff fb70 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000de4:	481a      	ldr	r0, [pc, #104]	; (8000e50 <main+0x634>)
 8000de6:	f000 f8ab 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::X, displayAddress);
 8000dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <main+0x678>)
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	466b      	mov	r3, sp
 8000df6:	f102 010c 	add.w	r1, r2, #12
 8000dfa:	c903      	ldmia	r1, {r0, r1}
 8000dfc:	6018      	str	r0, [r3, #0]
 8000dfe:	3304      	adds	r3, #4
 8000e00:	7019      	strb	r1, [r3, #0]
 8000e02:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000e04:	4811      	ldr	r0, [pc, #68]	; (8000e4c <main+0x630>)
 8000e06:	f7ff fb5d 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000e0a:	4811      	ldr	r0, [pc, #68]	; (8000e50 <main+0x634>)
 8000e0c:	f000 f898 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::Y, displayAddress);
 8000e10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4a20      	ldr	r2, [pc, #128]	; (8000e98 <main+0x67c>)
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	466b      	mov	r3, sp
 8000e1c:	f102 010c 	add.w	r1, r2, #12
 8000e20:	c903      	ldmia	r1, {r0, r1}
 8000e22:	6018      	str	r0, [r3, #0]
 8000e24:	3304      	adds	r3, #4
 8000e26:	7019      	strb	r1, [r3, #0]
 8000e28:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <main+0x630>)
 8000e2c:	f7ff fb4a 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  Delay(0xFFFFF);
 8000e30:	4807      	ldr	r0, [pc, #28]	; (8000e50 <main+0x634>)
 8000e32:	f000 f885 	bl	8000f40 <_Z5Delaym>
	  i2c.sendBytes(display::characters::Z, displayAddress);
 8000e36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <main+0x680>)
 8000e3e:	9302      	str	r3, [sp, #8]
 8000e40:	466b      	mov	r3, sp
 8000e42:	f102 010c 	add.w	r1, r2, #12
 8000e46:	c903      	ldmia	r1, {r0, r1}
 8000e48:	e02a      	b.n	8000ea0 <main+0x684>
 8000e4a:	bf00      	nop
 8000e4c:	20000024 	.word	0x20000024
 8000e50:	000fffff 	.word	0x000fffff
 8000e54:	08001534 	.word	0x08001534
 8000e58:	08001548 	.word	0x08001548
 8000e5c:	0800155c 	.word	0x0800155c
 8000e60:	08001570 	.word	0x08001570
 8000e64:	08001584 	.word	0x08001584
 8000e68:	08001598 	.word	0x08001598
 8000e6c:	080015ac 	.word	0x080015ac
 8000e70:	080015c0 	.word	0x080015c0
 8000e74:	080015d4 	.word	0x080015d4
 8000e78:	080015e8 	.word	0x080015e8
 8000e7c:	080015fc 	.word	0x080015fc
 8000e80:	08001610 	.word	0x08001610
 8000e84:	08001624 	.word	0x08001624
 8000e88:	08001638 	.word	0x08001638
 8000e8c:	0800164c 	.word	0x0800164c
 8000e90:	08001660 	.word	0x08001660
 8000e94:	08001674 	.word	0x08001674
 8000e98:	08001688 	.word	0x08001688
 8000e9c:	0800169c 	.word	0x0800169c
 8000ea0:	6018      	str	r0, [r3, #0]
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	7019      	strb	r1, [r3, #0]
 8000ea6:	ca0e      	ldmia	r2, {r1, r2, r3}
 8000ea8:	4823      	ldr	r0, [pc, #140]	; (8000f38 <main+0x71c>)
 8000eaa:	f7ff fb0b 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

	  if(buttonPressed){
 8000eae:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <main+0x720>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d039      	beq.n	8000f2c <main+0x710>
	  greenLED.toggle();
 8000eb8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f92b 	bl	8001118 <_ZNK4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EE6toggleEv>
	  buttonPressed = false;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <main+0x720>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]

	  	  if(panelOn){
 8000ec8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d013      	beq.n	8000ef8 <main+0x6dc>
	  		  i2c.sendBytes(all_off, 0x70);
 8000ed0:	2370      	movs	r3, #112	; 0x70
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	466b      	mov	r3, sp
 8000ed6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ede:	6018      	str	r0, [r3, #0]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	7019      	strb	r1, [r3, #0]
 8000ee4:	f107 0318 	add.w	r3, r7, #24
 8000ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000eea:	4813      	ldr	r0, [pc, #76]	; (8000f38 <main+0x71c>)
 8000eec:	f7ff faea 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  		  panelOn = false;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000ef6:	e019      	b.n	8000f2c <main+0x710>
	  	  }else if(!panelOn){
 8000ef8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000efc:	f083 0301 	eor.w	r3, r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d012      	beq.n	8000f2c <main+0x710>
	  		  i2c.sendBytes(all_on, 0x70);
 8000f06:	2370      	movs	r3, #112	; 0x70
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	466b      	mov	r3, sp
 8000f0c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f14:	6018      	str	r0, [r3, #0]
 8000f16:	3304      	adds	r3, #4
 8000f18:	7019      	strb	r1, [r3, #0]
 8000f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <main+0x71c>)
 8000f22:	f7ff facf 	bl	80004c4 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>
	  		  panelOn = true;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	  	  }
	  }
	i++;
 8000f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f30:	3301      	adds	r3, #1
 8000f32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  Delay(0xFFFFF);
 8000f36:	e582      	b.n	8000a3e <main+0x222>
 8000f38:	20000024 	.word	0x20000024
 8000f3c:	2000001c 	.word	0x2000001c

08000f40 <_Z5Delaym>:
  }
}
void Delay(__IO uint32_t nCount)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  while(nCount--)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1e5a      	subs	r2, r3, #1
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bf14      	ite	ne
 8000f52:	2301      	movne	r3, #1
 8000f54:	2300      	moveq	r3, #0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d000      	beq.n	8000f5e <_Z5Delaym+0x1e>
 8000f5c:	e7f4      	b.n	8000f48 <_Z5Delaym+0x8>
  {
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev>:
class GPIO{


public:

	GPIO(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

		//set mode register
		uint32_t tempMask = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 8000f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f7c:	60fb      	str	r3, [r7, #12]

		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x5c>)
 8000f82:	f000 f8d3 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>

		//set ouput type register
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 8000f86:	f000 f8e3 	bl	8001150 <_ZN10reg_accessImmLm1073873924ELm0EE6reg_orEv>

		//set output speed register
		tempMask = 0x0U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8000f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f92:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 8000f94:	68f9      	ldr	r1, [r7, #12]
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x60>)
 8000f98:	f000 f8c8 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>

		//set pull-up/pull-down register
		tempMask = 0x0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 8000fa4:	68f9      	ldr	r1, [r7, #12]
 8000fa6:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x64>)
 8000fa8:	f000 f8c0 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
		if(pinNumber <= PINS::PIN7){
			tempMask = 0x0U;
			tempMask = alternateFunction << ((pinNumber - 1) * 4);
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionLowRegister, tempMask);
		}else{
			tempMask = 0x0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x68>)
 8000fb8:	f000 f8b8 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>

		}


	}
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40020408 	.word	0x40020408
 8000fd0:	4002040c 	.word	0x4002040c
 8000fd4:	40020424 	.word	0x40020424

08000fd8 <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev>:
	GPIO(){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 8000fe8:	68f9      	ldr	r1, [r7, #12]
 8000fea:	4811      	ldr	r0, [pc, #68]	; (8001030 <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev+0x58>)
 8000fec:	f000 f89e 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 8000ff0:	f000 f8bc 	bl	800116c <_ZN10reg_accessImmLm1073874948ELm0EE6reg_orEv>
		tempMask = 0x0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8000ff8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ffc:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 8000ffe:	68f9      	ldr	r1, [r7, #12]
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev+0x5c>)
 8001002:	f000 f893 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 800100e:	68f9      	ldr	r1, [r7, #12]
 8001010:	4809      	ldr	r0, [pc, #36]	; (8001038 <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev+0x60>)
 8001012:	f000 f88b 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 800101e:	68f9      	ldr	r1, [r7, #12]
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev+0x64>)
 8001022:	f000 f883 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40020800 	.word	0x40020800
 8001034:	40020808 	.word	0x40020808
 8001038:	4002080c 	.word	0x4002080c
 800103c:	40020824 	.word	0x40020824

08001040 <_ZN4GPIOILm1073873920ELm7ELm2ELm1ELm2ELm0ELm4EEC1Ev>:
	GPIO(){
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 800104c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001050:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 8001052:	68f9      	ldr	r1, [r7, #12]
 8001054:	4811      	ldr	r0, [pc, #68]	; (800109c <_ZN4GPIOILm1073873920ELm7ELm2ELm1ELm2ELm0ELm4EEC1Ev+0x5c>)
 8001056:	f000 f869 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 800105a:	f000 f895 	bl	8001188 <_ZN10reg_accessImmLm1073873924ELm64EE6reg_orEv>
		tempMask = 0x0U;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8001062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001066:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 8001068:	68f9      	ldr	r1, [r7, #12]
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <_ZN4GPIOILm1073873920ELm7ELm2ELm1ELm2ELm0ELm4EEC1Ev+0x60>)
 800106c:	f000 f85e 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 8001078:	68f9      	ldr	r1, [r7, #12]
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <_ZN4GPIOILm1073873920ELm7ELm2ELm1ELm2ELm0ELm4EEC1Ev+0x64>)
 800107c:	f000 f856 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 1) * 4);
 8001084:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001088:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionLowRegister, tempMask);
 800108a:	68f9      	ldr	r1, [r7, #12]
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <_ZN4GPIOILm1073873920ELm7ELm2ELm1ELm2ELm0ELm4EEC1Ev+0x68>)
 800108e:	f000 f84d 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020408 	.word	0x40020408
 80010a4:	4002040c 	.word	0x4002040c
 80010a8:	40020420 	.word	0x40020420

080010ac <_ZN4GPIOILm1073873920ELm8ELm2ELm1ELm2ELm0ELm4EEC1Ev>:
	GPIO(){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 80010b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010bc:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <_ZN4GPIOILm1073873920ELm8ELm2ELm1ELm2ELm0ELm4EEC1Ev+0x5c>)
 80010c2:	f000 f833 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 80010c6:	f000 f86f 	bl	80011a8 <_ZN10reg_accessImmLm1073873924ELm128EE6reg_orEv>
		tempMask = 0x0U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 80010ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010d2:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <_ZN4GPIOILm1073873920ELm8ELm2ELm1ELm2ELm0ELm4EEC1Ev+0x60>)
 80010d8:	f000 f828 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 80010e4:	68f9      	ldr	r1, [r7, #12]
 80010e6:	480a      	ldr	r0, [pc, #40]	; (8001110 <_ZN4GPIOILm1073873920ELm8ELm2ELm1ELm2ELm0ELm4EEC1Ev+0x64>)
 80010e8:	f000 f820 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 1) * 4);
 80010f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f4:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionLowRegister, tempMask);
 80010f6:	68f9      	ldr	r1, [r7, #12]
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <_ZN4GPIOILm1073873920ELm8ELm2ELm1ELm2ELm0ELm4EEC1Ev+0x68>)
 80010fa:	f000 f817 	bl	800112c <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020400 	.word	0x40020400
 800110c:	40020408 	.word	0x40020408
 8001110:	4002040c 	.word	0x4002040c
 8001114:	40020420 	.word	0x40020420

08001118 <_ZNK4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EE6toggleEv>:

	void toggle() const{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

		reg_access<GPIOxRegisterType, GPIOxRegisterType, GPIOxOutputDataRegister, bitPosition>::reg_xor();
 8001120:	f7ff facc 	bl	80006bc <_ZN10reg_accessImmLm1073873940ELm4096EE7reg_xorEv>
	}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <_ZN14dynamic_accessImmE6reg_orEmm>:
        static void reg_or (const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address) |= value; }
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	6811      	ldr	r1, [r2, #0]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <_ZN10reg_accessImmLm1073873924ELm0EE6reg_orEv>:
    static void reg_or()
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) |= value;
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <_ZN10reg_accessImmLm1073873924ELm0EE6reg_orEv+0x18>)
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <_ZN10reg_accessImmLm1073873924ELm0EE6reg_orEv+0x18>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6013      	str	r3, [r2, #0]
    }
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40020404 	.word	0x40020404

0800116c <_ZN10reg_accessImmLm1073874948ELm0EE6reg_orEv>:
    static void reg_or()
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) |= value;
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <_ZN10reg_accessImmLm1073874948ELm0EE6reg_orEv+0x18>)
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <_ZN10reg_accessImmLm1073874948ELm0EE6reg_orEv+0x18>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6013      	str	r3, [r2, #0]
    }
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40020804 	.word	0x40020804

08001188 <_ZN10reg_accessImmLm1073873924ELm64EE6reg_orEv>:
    static void reg_or()
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) |= value;
 800118c:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_ZN10reg_accessImmLm1073873924ELm64EE6reg_orEv+0x1c>)
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <_ZN10reg_accessImmLm1073873924ELm64EE6reg_orEv+0x1c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001196:	6013      	str	r3, [r2, #0]
    }
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40020404 	.word	0x40020404

080011a8 <_ZN10reg_accessImmLm1073873924ELm128EE6reg_orEv>:
    static void reg_or()
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) |= value;
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_ZN10reg_accessImmLm1073873924ELm128EE6reg_orEv+0x1c>)
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <_ZN10reg_accessImmLm1073873924ELm128EE6reg_orEv+0x1c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b6:	6013      	str	r3, [r2, #0]
    }
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40020404 	.word	0x40020404

080011c8 <_Z41__static_initialization_and_destruction_0ii>:
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d108      	bne.n	80011ea <_Z41__static_initialization_and_destruction_0ii+0x22>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011de:	4293      	cmp	r3, r2
 80011e0:	d103      	bne.n	80011ea <_Z41__static_initialization_and_destruction_0ii+0x22>
I2CMaster i2c(I2C::BaseRegisters::I2C1_Base);
 80011e2:	4904      	ldr	r1, [pc, #16]	; (80011f4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80011e6:	f7ff f8f1 	bl	80003cc <_ZN9I2CMasterC1Em>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40005400 	.word	0x40005400
 80011f8:	20000024 	.word	0x20000024

080011fc <_GLOBAL__sub_I_buttonPressed>:
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
 8001200:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff ffdf 	bl	80011c8 <_Z41__static_initialization_and_destruction_0ii>
 800120a:	bd80      	pop	{r7, pc}

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001212:	e003      	b.n	800121c <LoopCopyDataInit>

08001214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800121a:	3104      	adds	r1, #4

0800121c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001224:	d3f6      	bcc.n	8001214 <CopyDataInit>
  ldr  r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001228:	e002      	b.n	8001230 <LoopFillZerobss>

0800122a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800122a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800122c:	f842 3b04 	str.w	r3, [r2], #4

08001230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001234:	d3f9      	bcc.n	800122a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001236:	f000 f841 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f000 f8f1 	bl	8001420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff faed 	bl	800081c <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001248:	080016bc 	.word	0x080016bc
  ldr  r0, =_sdata
 800124c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001250:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8001254:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8001258:	20000060 	.word	0x20000060

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>

0800125e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001270:	e7fe      	b.n	8001270 <HardFault_Handler+0x4>

08001272 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001276:	e7fe      	b.n	8001276 <MemManage_Handler+0x4>

08001278 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800127c:	e7fe      	b.n	800127c <BusFault_Handler+0x4>

0800127e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001282:	e7fe      	b.n	8001282 <UsageFault_Handler+0x4>

08001284 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c0:	4a16      	ldr	r2, [pc, #88]	; (800131c <SystemInit+0x60>)
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <SystemInit+0x60>)
 80012c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <SystemInit+0x64>)
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <SystemInit+0x64>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <SystemInit+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80012e2:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <SystemInit+0x64>)
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <SystemInit+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80012ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <SystemInit+0x64>)
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <SystemInit+0x68>)
 80012f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <SystemInit+0x64>)
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <SystemInit+0x64>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001302:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SystemInit+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800130a:	f000 f80d 	bl	8001328 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800130e:	4b03      	ldr	r3, [pc, #12]	; (800131c <SystemInit+0x60>)
 8001310:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001314:	609a      	str	r2, [r3, #8]
#endif
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	40023800 	.word	0x40023800
 8001324:	24003010 	.word	0x24003010

08001328 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001336:	4a36      	ldr	r2, [pc, #216]	; (8001410 <SetSysClock+0xe8>)
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <SetSysClock+0xe8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <SetSysClock+0xe8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d103      	bne.n	8001360 <SetSysClock+0x38>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800135e:	d1f0      	bne.n	8001342 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <SetSysClock+0xe8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800136c:	2301      	movs	r3, #1
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	e001      	b.n	8001376 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d142      	bne.n	8001402 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800137c:	4a24      	ldr	r2, [pc, #144]	; (8001410 <SetSysClock+0xe8>)
 800137e:	4b24      	ldr	r3, [pc, #144]	; (8001410 <SetSysClock+0xe8>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <SetSysClock+0xec>)
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <SetSysClock+0xec>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001392:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001394:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <SetSysClock+0xe8>)
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <SetSysClock+0xe8>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <SetSysClock+0xe8>)
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <SetSysClock+0xe8>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80013a8:	4a19      	ldr	r2, [pc, #100]	; (8001410 <SetSysClock+0xe8>)
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <SetSysClock+0xe8>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80013b2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <SetSysClock+0xe8>)
 80013b6:	4a18      	ldr	r2, [pc, #96]	; (8001418 <SetSysClock+0xf0>)
 80013b8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80013ba:	4a15      	ldr	r2, [pc, #84]	; (8001410 <SetSysClock+0xe8>)
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <SetSysClock+0xe8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80013c6:	bf00      	nop
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <SetSysClock+0xe8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f9      	beq.n	80013c8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <SetSysClock+0xf4>)
 80013d6:	f240 7205 	movw	r2, #1797	; 0x705
 80013da:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <SetSysClock+0xe8>)
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <SetSysClock+0xe8>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f023 0303 	bic.w	r3, r3, #3
 80013e6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <SetSysClock+0xe8>)
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <SetSysClock+0xe8>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80013f4:	bf00      	nop
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SetSysClock+0xe8>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d1f9      	bne.n	80013f6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000
 8001418:	07405419 	.word	0x07405419
 800141c:	40023c00 	.word	0x40023c00

08001420 <__libc_init_array>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	4e0d      	ldr	r6, [pc, #52]	; (8001458 <__libc_init_array+0x38>)
 8001424:	4c0d      	ldr	r4, [pc, #52]	; (800145c <__libc_init_array+0x3c>)
 8001426:	1ba4      	subs	r4, r4, r6
 8001428:	10a4      	asrs	r4, r4, #2
 800142a:	2500      	movs	r5, #0
 800142c:	42a5      	cmp	r5, r4
 800142e:	d109      	bne.n	8001444 <__libc_init_array+0x24>
 8001430:	4e0b      	ldr	r6, [pc, #44]	; (8001460 <__libc_init_array+0x40>)
 8001432:	4c0c      	ldr	r4, [pc, #48]	; (8001464 <__libc_init_array+0x44>)
 8001434:	f000 f818 	bl	8001468 <_init>
 8001438:	1ba4      	subs	r4, r4, r6
 800143a:	10a4      	asrs	r4, r4, #2
 800143c:	2500      	movs	r5, #0
 800143e:	42a5      	cmp	r5, r4
 8001440:	d105      	bne.n	800144e <__libc_init_array+0x2e>
 8001442:	bd70      	pop	{r4, r5, r6, pc}
 8001444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001448:	4798      	blx	r3
 800144a:	3501      	adds	r5, #1
 800144c:	e7ee      	b.n	800142c <__libc_init_array+0xc>
 800144e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001452:	4798      	blx	r3
 8001454:	3501      	adds	r5, #1
 8001456:	e7f2      	b.n	800143e <__libc_init_array+0x1e>
 8001458:	080016b0 	.word	0x080016b0
 800145c:	080016b0 	.word	0x080016b0
 8001460:	080016b0 	.word	0x080016b0
 8001464:	080016b8 	.word	0x080016b8

08001468 <_init>:
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146a:	bf00      	nop
 800146c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800146e:	bc08      	pop	{r3}
 8001470:	469e      	mov	lr, r3
 8001472:	4770      	bx	lr

08001474 <_fini>:
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001476:	bf00      	nop
 8001478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147a:	bc08      	pop	{r3}
 800147c:	469e      	mov	lr, r3
 800147e:	4770      	bx	lr
