
stm_prototype_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d24  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000eac  08000eac  00010eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08000ec0  08000ec0  00010ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ec8  08000ec8  00010ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010ecc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010ecc  2**0
                  CONTENTS
  7 .bss          00000060  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000060  20000060  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010ecc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000100a4  00000000  00000000  00010efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001855  00000000  00000000  00020fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000400  00000000  00000000  000227f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000388  00000000  00000000  00022bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001f3d  00000000  00000000  00022f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000093f7  00000000  00000000  00024ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002e2b4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000f88  00000000  00000000  0002e330  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e94 	.word	0x08000e94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000e94 	.word	0x08000e94

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000294:	2300      	movs	r3, #0
 8000296:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <EXTI_GetITStatus+0x44>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4013      	ands	r3, r2
 80002a4:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80002a6:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <EXTI_GetITStatus+0x44>)
 80002a8:	695a      	ldr	r2, [r3, #20]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4013      	ands	r3, r2
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d005      	beq.n	80002be <EXTI_GetITStatus+0x32>
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d002      	beq.n	80002be <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 80002b8:	2301      	movs	r3, #1
 80002ba:	73fb      	strb	r3, [r7, #15]
 80002bc:	e001      	b.n	80002c2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80002c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	40013c00 	.word	0x40013c00

080002d4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80002dc:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <EXTI_ClearITPendingBit+0x1c>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	6153      	str	r3, [r2, #20]
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40013c00 	.word	0x40013c00

080002f4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	460b      	mov	r3, r1
 80002fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000300:	78fb      	ldrb	r3, [r7, #3]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d006      	beq.n	8000314 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000306:	490a      	ldr	r1, [pc, #40]	; (8000330 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <RCC_AHB1PeriphClockCmd+0x3c>)
 800030a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4313      	orrs	r3, r2
 8000310:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000312:	e006      	b.n	8000322 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000314:	4906      	ldr	r1, [pc, #24]	; (8000330 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	43db      	mvns	r3, r3
 800031e:	4013      	ands	r3, r2
 8000320:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800

08000334 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000340:	78fb      	ldrb	r3, [r7, #3]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d006      	beq.n	8000354 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000346:	490a      	ldr	r1, [pc, #40]	; (8000370 <RCC_APB1PeriphClockCmd+0x3c>)
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <RCC_APB1PeriphClockCmd+0x3c>)
 800034a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4313      	orrs	r3, r2
 8000350:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000352:	e006      	b.n	8000362 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000354:	4906      	ldr	r1, [pc, #24]	; (8000370 <RCC_APB1PeriphClockCmd+0x3c>)
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <RCC_APB1PeriphClockCmd+0x3c>)
 8000358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	43db      	mvns	r3, r3
 800035e:	4013      	ands	r3, r2
 8000360:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40023800 	.word	0x40023800

08000374 <I2C1_EV_IRQHandler>:
#include "i2c.h"

extern "C"{

	void I2C1_EV_IRQHandler(void)
	{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	    I2CMaster::handlers[1]-> EV_handler();
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <I2C1_EV_IRQHandler+0x14>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f8d3 	bl	8000528 <_ZN9I2CMaster10EV_handlerEv>

	}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000020 	.word	0x20000020

0800038c <I2C1_ER_IRQHandler>:

	void I2C1_ER_IRQHandler(void)
	{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	    I2CMaster::handlers[1]-> ER_handler();
 8000390:	4b03      	ldr	r3, [pc, #12]	; (80003a0 <I2C1_ER_IRQHandler+0x14>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f931 	bl	80005fc <_ZN9I2CMaster10ER_handlerEv>

	}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000020 	.word	0x20000020

080003a4 <_ZN9I2CMasterC1Em>:
}

I2CMaster::I2CMaster(I2C::BaseRegisterType baseRegister)
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
{

		clockControlRegister = baseRegister + I2C::ClockControlRegister::RegiserOffset;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	f103 021c 	add.w	r2, r3, #28
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	601a      	str	r2, [r3, #0]
		controlRegister1 = baseRegister + I2C::ControlRegister1::RegisterOffset;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	683a      	ldr	r2, [r7, #0]
 80003bc:	605a      	str	r2, [r3, #4]
		controlRegister2 = baseRegister + I2C::ControlRegister2::RegisterOffset;
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	1d1a      	adds	r2, r3, #4
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	609a      	str	r2, [r3, #8]
		dataRegister = baseRegister + I2C::DataRegister::RegisterOffset;
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f103 0210 	add.w	r2, r3, #16
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	60da      	str	r2, [r3, #12]
		filterRegister = baseRegister + I2C::FilterRegister::RegisterOffset;
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	611a      	str	r2, [r3, #16]
		ownAddressRegister = baseRegister + I2C::OwnAddressRegister::RegisterOffset;
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	f103 0208 	add.w	r2, r3, #8
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	615a      	str	r2, [r3, #20]
		ownAddressRegister2 = baseRegister + I2C::OwnAddressRegister2::RegisterOffset;
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	f103 020c 	add.w	r2, r3, #12
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	619a      	str	r2, [r3, #24]
		statusRegister1 = baseRegister + I2C::StatusRegister1::RegisterOffset;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	f103 0214 	add.w	r2, r3, #20
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	61da      	str	r2, [r3, #28]
		statusRegister2 = baseRegister + I2C::StatusRegister2::RegisterOffset;
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	f103 0218 	add.w	r2, r3, #24
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	621a      	str	r2, [r3, #32]
		triseRegister = baseRegister + I2C::TRiseRegiser::RegisterOffset;
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	f103 0220 	add.w	r2, r3, #32
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	625a      	str	r2, [r3, #36]	; 0x24

		I2CMaster::handlers[1] = this;
 800040c:	4a19      	ldr	r2, [pc, #100]	; (8000474 <_ZN9I2CMasterC1Em+0xd0>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	6053      	str	r3, [r2, #4]

	    // Step 1: Initialize I2C
	    //Program the peripheral input clock in the I2C_CR2 register in order to generate the correct timings
	    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000412:	2101      	movs	r1, #1
 8000414:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000418:	f7ff ff8c 	bl	8000334 <RCC_APB1PeriphClockCmd>

	    //set frequency bits
	    dynamic_access<I2C::ControlRegister2Type, I2C::ControlRegister2Type>::reg_or(controlRegister2, 0x10U);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	2110      	movs	r1, #16
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f8f4 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>

	    //configure the clock control registers
	    dynamic_access<I2C::ClockControlRegisterType, I2C::ClockControlRegisterType>::reg_or(clockControlRegister, 0x50U);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	2150      	movs	r1, #80	; 0x50
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f8ee 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>

	    //configure the rise time register
	    dynamic_access<I2C::TRiseRegisterType, I2C::TRiseRegisterType>::reg_or(triseRegister, 0x11U);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000438:	2111      	movs	r1, #17
 800043a:	4618      	mov	r0, r3
 800043c:	f000 f8e8 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>

	    //program the I2C_CR1 register to enable the peripheral
	    dynamic_access<I2C::ControlRegister2Type, I2C::ControlRegister2Type>::reg_or(controlRegister2,
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
	    		I2C::ControlRegister2::BufferInterruptEnable |
				I2C::ControlRegister2::ErrorInterruptEnable |
				I2C::ControlRegister2::EventInterruptEnable);
 8000444:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000448:	4618      	mov	r0, r3
 800044a:	f000 f8e1 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>



	    dynamic_access<I2C::ControlRegister1Type, I2C::ControlRegister1Type>::reg_not(controlRegister1,
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	685b      	ldr	r3, [r3, #4]
	    		I2C::ControlRegister1::ACK);
 8000452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f8eb 	bl	8000632 <_ZN14dynamic_accessImmE7reg_notEmm>

	    dynamic_access<I2C::ControlRegister1Type, I2C::ControlRegister1Type>::reg_or(controlRegister1,
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	685b      	ldr	r3, [r3, #4]
	    		I2C::ControlRegister1::PeripheralEnable);
 8000460:	2101      	movs	r1, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f8d4 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
//	    I2C_Init(I2Cx, &I2C_InitStruct);
//	    I2C_Cmd(I2Cx, ENABLE);



}
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4618      	mov	r0, r3
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000020 	.word	0x20000020

08000478 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>:

int I2CMaster::sendBytes(send_buffer_type sendBuffer, uint8_t address)
{
 8000478:	b084      	sub	sp, #16
 800047a:	b5b0      	push	{r4, r5, r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	f107 001c 	add.w	r0, r7, #28
 8000486:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	bytesSent = 0;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2200      	movs	r2, #0
 800048e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	send_buf = sendBuffer;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000498:	f107 051c 	add.w	r5, r7, #28
 800049c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800049e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a0:	682b      	ldr	r3, [r5, #0]
 80004a2:	7023      	strb	r3, [r4, #0]

	//Set Start Bit
	dynamic_access<I2C::ControlRegister1Type, I2C::ControlRegister1Type> ::reg_or(controlRegister1, I2C::ControlRegister1::Start);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 f8af 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>

	//Clear Start bit by reading SR1 followed by writing DR with address
	//send address with LSB reset to enter transmit mode
	dynamic_access<I2C::StatusRegister1Type, I2C::StatusRegister1Type>::reg_get(statusRegister1);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f8cd 	bl	8000656 <_ZN14dynamic_accessImmE7reg_getEm>
	dynamic_access<I2C::DataRegisterType, uint8_t>::reg_set(dataRegister, (address << 1));
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4619      	mov	r1, r3
 80004ca:	4610      	mov	r0, r2
 80004cc:	f000 f8cf 	bl	800066e <_ZN14dynamic_accessImhE7reg_setEmh>

	//ADDR = 1, cleared by reading SR1 register followed by reading SR2
	dynamic_access<I2C::StatusRegister1Type, I2C::StatusRegister1Type>::reg_get(statusRegister1);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	69db      	ldr	r3, [r3, #28]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 f8be 	bl	8000656 <_ZN14dynamic_accessImmE7reg_getEm>
	dynamic_access<I2C::StatusRegister2Type, I2C::StatusRegister2Type>::reg_get(statusRegister2);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6a1b      	ldr	r3, [r3, #32]
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f8b9 	bl	8000656 <_ZN14dynamic_accessImmE7reg_getEm>

	//TxE = 1, write Data1 in DR
	dynamic_access<I2C::DataRegisterType, uint8_t>::reg_set(dataRegister, send_buf[bytesSent]);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	68dc      	ldr	r4, [r3, #12]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80004f4:	4619      	mov	r1, r3
 80004f6:	4610      	mov	r0, r2
 80004f8:	f000 f8d6 	bl	80006a8 <_ZNSt5arrayIhLj17EEixEj>
 80004fc:	4603      	mov	r3, r0
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	4619      	mov	r1, r3
 8000502:	4620      	mov	r0, r4
 8000504:	f000 f8b3 	bl	800066e <_ZN14dynamic_accessImhE7reg_setEmh>
	bytesSent++;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800050e:	3301      	adds	r3, #1
 8000510:	b2da      	uxtb	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	//keep writing data
	//TxE = 1, BTF = 1, program stop request


	return 1;
 8000518:	2301      	movs	r3, #1
}
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000524:	b004      	add	sp, #16
 8000526:	4770      	bx	lr

08000528 <_ZN9I2CMaster10EV_handlerEv>:

void I2CMaster::EV_handler()
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

	if((dynamic_access<I2C::StatusRegister1Type, I2C::StatusRegister1Type>::reg_get(statusRegister1) & I2C::StatusRegister1::TransmitEmpty) && (bytesSent < 17)){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	4618      	mov	r0, r3
 8000536:	f000 f88e 	bl	8000656 <_ZN14dynamic_accessImmE7reg_getEm>
 800053a:	4603      	mov	r3, r0
 800053c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000540:	2b00      	cmp	r3, #0
 8000542:	d006      	beq.n	8000552 <_ZN9I2CMaster10EV_handlerEv+0x2a>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800054a:	2b10      	cmp	r3, #16
 800054c:	dc01      	bgt.n	8000552 <_ZN9I2CMaster10EV_handlerEv+0x2a>
 800054e:	2301      	movs	r3, #1
 8000550:	e000      	b.n	8000554 <_ZN9I2CMaster10EV_handlerEv+0x2c>
 8000552:	2300      	movs	r3, #0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d019      	beq.n	800058c <_ZN9I2CMaster10EV_handlerEv+0x64>
		dynamic_access<I2C::DataRegisterType, uint8_t>::reg_set(dataRegister, send_buf[bytesSent]);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	68dc      	ldr	r4, [r3, #12]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000568:	4619      	mov	r1, r3
 800056a:	4610      	mov	r0, r2
 800056c:	f000 f89c 	bl	80006a8 <_ZNSt5arrayIhLj17EEixEj>
 8000570:	4603      	mov	r3, r0
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	4620      	mov	r0, r4
 8000578:	f000 f879 	bl	800066e <_ZN14dynamic_accessImhE7reg_setEmh>
		bytesSent++;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000582:	3301      	adds	r3, #1
 8000584:	b2da      	uxtb	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	if((dynamic_access<I2C::StatusRegister1Type, I2C::StatusRegister1Type>::reg_get(statusRegister1) & I2C::StatusRegister1::TransmitEmpty) && (bytesSent = 17)){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f860 	bl	8000656 <_ZN14dynamic_accessImmE7reg_getEm>
 8000596:	4603      	mov	r3, r0
 8000598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059c:	2b00      	cmp	r3, #0
 800059e:	d005      	beq.n	80005ac <_ZN9I2CMaster10EV_handlerEv+0x84>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2211      	movs	r2, #17
 80005a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80005a8:	2301      	movs	r3, #1
 80005aa:	e000      	b.n	80005ae <_ZN9I2CMaster10EV_handlerEv+0x86>
 80005ac:	2300      	movs	r3, #0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d020      	beq.n	80005f4 <_ZN9I2CMaster10EV_handlerEv+0xcc>
		dynamic_access<I2C::DataRegisterType, uint8_t>::reg_set(dataRegister, send_buf[bytesSent]);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68dc      	ldr	r4, [r3, #12]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80005c2:	4619      	mov	r1, r3
 80005c4:	4610      	mov	r0, r2
 80005c6:	f000 f86f 	bl	80006a8 <_ZNSt5arrayIhLj17EEixEj>
 80005ca:	4603      	mov	r3, r0
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4619      	mov	r1, r3
 80005d0:	4620      	mov	r0, r4
 80005d2:	f000 f84c 	bl	800066e <_ZN14dynamic_accessImhE7reg_setEmh>
		dynamic_access<I2C::ControlRegister1Type, I2C::ControlRegister1Type>::reg_or(controlRegister1, I2C::ControlRegister1::Stop);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f816 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
		bytesSent++;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80005ea:	3301      	adds	r3, #1
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd90      	pop	{r4, r7, pc}

080005fc <_ZN9I2CMaster10ER_handlerEv>:

void I2CMaster::ER_handler()
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]



}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <_ZN14dynamic_accessImmE6reg_orEmm>:
        static register_value_type
                    reg_get(const register_address_type address) { return *reinterpret_cast<volatile register_value_type*>(address); }

        static void reg_set(const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address)  = value; }
        static void reg_and(const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address) &= value; }
        static void reg_or (const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address) |= value; }
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	6811      	ldr	r1, [r2, #0]
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	430a      	orrs	r2, r1
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_ZN14dynamic_accessImmE7reg_notEmm>:
        static void reg_not(const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address) &= register_value_type(~value); }
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	43d2      	mvns	r2, r2
 8000646:	400a      	ands	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <_ZN14dynamic_accessImmE7reg_getEm>:
                    reg_get(const register_address_type address) { return *reinterpret_cast<volatile register_value_type*>(address); }
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <_ZN14dynamic_accessImhE7reg_setEmh>:
        static void reg_set(const register_address_type address, const register_value_type value) { *reinterpret_cast<volatile register_value_type*>(address)  = value; }
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	460b      	mov	r3, r1
 8000678:	70fb      	strb	r3, [r7, #3]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	78fa      	ldrb	r2, [r7, #3]
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <_ZNSt14__array_traitsIhLj17EE6_S_refERA17_Khj>:
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_ZNSt5arrayIhLj17EEixEj>:
      constexpr bool 
      empty() const noexcept { return size() == 0; }

      // Element access.
      reference
      operator[](size_type __n) noexcept
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
      { return _AT_Type::_S_ref(_M_elems, __n); }
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ffe8 	bl	800068c <_ZNSt14__array_traitsIhLj17EE6_S_refERA17_Khj>
 80006bc:	4603      	mov	r3, r0
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80006d2:	4909      	ldr	r1, [pc, #36]	; (80006f8 <NVIC_EnableIRQ+0x30>)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	095b      	lsrs	r3, r3, #5
 80006da:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80006de:	f002 021f 	and.w	r2, r2, #31
 80006e2:	2001      	movs	r0, #1
 80006e4:	fa00 f202 	lsl.w	r2, r0, r2
 80006e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100

080006fc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	da0d      	bge.n	800072c <NVIC_SetPriority+0x30>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000710:	490f      	ldr	r1, [pc, #60]	; (8000750 <NVIC_SetPriority+0x54>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	f003 030f 	and.w	r3, r3, #15
 800071c:	3b04      	subs	r3, #4
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	0112      	lsls	r2, r2, #4
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	440b      	add	r3, r1
 8000728:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800072a:	e00b      	b.n	8000744 <NVIC_SetPriority+0x48>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <NVIC_SetPriority+0x58>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	4618      	mov	r0, r3
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	b2d9      	uxtb	r1, r3
 800073c:	1813      	adds	r3, r2, r0
 800073e:	460a      	mov	r2, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000ed00 	.word	0xe000ed00
 8000754:	e000e100 	.word	0xe000e100

08000758 <EXTI0_IRQHandler>:
//}

extern "C"
{
	void EXTI0_IRQHandler(void)
	{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
		// Checks whether the interrupt from EXTI0 or not
		if (EXTI_GetITStatus(EXTI_Line0))
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff fd95 	bl	800028c <EXTI_GetITStatus>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf14      	ite	ne
 8000768:	2301      	movne	r3, #1
 800076a:	2300      	moveq	r3, #0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d008      	beq.n	8000784 <EXTI0_IRQHandler+0x2c>
		{
			buttonPressed= true;
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <EXTI0_IRQHandler+0x30>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
			Delay(0xFFFFF);
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <EXTI0_IRQHandler+0x34>)
 800077a:	f000 f8f9 	bl	8000970 <_Z5Delaym>
			// Clears the EXTI line pending bit
			EXTI_ClearITPendingBit(EXTI_Line0);
 800077e:	2001      	movs	r0, #1
 8000780:	f7ff fda8 	bl	80002d4 <EXTI_ClearITPendingBit>
		}
	}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000001c 	.word	0x2000001c
 800078c:	000fffff 	.word	0x000fffff

08000790 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000790:	b5b0      	push	{r4, r5, r7, lr}
 8000792:	b0a4      	sub	sp, #144	; 0x90
 8000794:	af04      	add	r7, sp, #16

  int i = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	67fb      	str	r3, [r7, #124]	; 0x7c

  buttonPressed = false;
 800079a:	4b6f      	ldr	r3, [pc, #444]	; (8000958 <main+0x1c8>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]

  Delay(0xFFFFF);
 80007a0:	486e      	ldr	r0, [pc, #440]	; (800095c <main+0x1cc>)
 80007a2:	f000 f8e5 	bl	8000970 <_Z5Delaym>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80007a6:	2101      	movs	r1, #1
 80007a8:	2002      	movs	r0, #2
 80007aa:	f7ff fda3 	bl	80002f4 <RCC_AHB1PeriphClockCmd>
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80007ae:	2101      	movs	r1, #1
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff fd9f 	bl	80002f4 <RCC_AHB1PeriphClockCmd>
  	  PINS::PIN12,
  	  GpioModes::Output,
  	  OutputTypes::PushPull,
  	  OutputSpeed::MediumSpeed,
  	  PullUpPullDown::NoPullUpPullDown,
  	  AlternateFunction::AF0>greenLED;
 80007b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f8ee 	bl	800099c <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev>

  greenLED.toggle();
 80007c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f91f 	bl	8000a08 <_ZNK4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EE6toggleEv>
  	  PINS::PIN13,
	  GpioModes::Input,
	  OutputTypes::PushPull,
	  OutputSpeed::MediumSpeed,
	  PullUpPullDown::NoPullUpPullDown,
	  AlternateFunction::AF0>buttonPin;
 80007ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f924 	bl	8000a1c <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev>
  	  PINS::PIN6,
  	  GpioModes::Output,
  	  OutputTypes::OpenDrain,
  	  OutputSpeed::HighSpeed,
  	  PullUpPullDown::NoPullUpPullDown,
  	  AlternateFunction::AF4>sdaPin;
 80007d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f953 	bl	8000a84 <_ZN4GPIOILm1073873920ELm7ELm1ELm1ELm2ELm0ELm4EEC1Ev>
  	  PINS::PIN7,
  	  GpioModes::Output,
  	  OutputTypes::OpenDrain,
  	  OutputSpeed::HighSpeed,
  	  PullUpPullDown::NoPullUpPullDown,
  	  AlternateFunction::AF4>sclPin;
 80007de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f984 	bl	8000af0 <_ZN4GPIOILm1073873920ELm8ELm1ELm1ELm2ELm0ELm4EEC1Ev>



  SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PA;
 80007e8:	4b5d      	ldr	r3, [pc, #372]	; (8000960 <main+0x1d0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]

  EXTI->IMR |= EXTI_IMR_MR0;
 80007ee:	4a5d      	ldr	r2, [pc, #372]	; (8000964 <main+0x1d4>)
 80007f0:	4b5c      	ldr	r3, [pc, #368]	; (8000964 <main+0x1d4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6013      	str	r3, [r2, #0]
  EXTI->RTSR |= EXTI_RTSR_TR0;
 80007fa:	4a5a      	ldr	r2, [pc, #360]	; (8000964 <main+0x1d4>)
 80007fc:	4b59      	ldr	r3, [pc, #356]	; (8000964 <main+0x1d4>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6093      	str	r3, [r2, #8]

  NVIC_EnableIRQ(EXTI0_IRQn);
 8000806:	2006      	movs	r0, #6
 8000808:	f7ff ff5e 	bl	80006c8 <NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI0_IRQn, 0);
 800080c:	2100      	movs	r1, #0
 800080e:	2006      	movs	r0, #6
 8000810:	f7ff ff74 	bl	80006fc <NVIC_SetPriority>

  /* Configure the I2C event priority */
  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel                   = I2C1_EV_IRQn;
 8000814:	231f      	movs	r3, #31
 8000816:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
 8000826:	2301      	movs	r3, #1
 8000828:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  NVIC_Init(&NVIC_InitStructure);
 800082c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fcc9 	bl	80001c8 <NVIC_Init>
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
  const std::array<uint8_t, 17> osc_on = {0x21, 0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8000836:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	741a      	strb	r2, [r3, #16]
 8000846:	2321      	movs	r3, #33	; 0x21
 8000848:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  i2c.sendBytes(osc_on, 0x070);
 800084c:	2370      	movs	r3, #112	; 0x70
 800084e:	9302      	str	r3, [sp, #8]
 8000850:	466b      	mov	r3, sp
 8000852:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800085a:	6018      	str	r0, [r3, #0]
 800085c:	3304      	adds	r3, #4
 800085e:	7019      	strb	r1, [r3, #0]
 8000860:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000864:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000866:	4840      	ldr	r0, [pc, #256]	; (8000968 <main+0x1d8>)
 8000868:	f7ff fe06 	bl	8000478 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

  const std::array<uint8_t, 17> no_blink = {0x81, 0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 800086c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	741a      	strb	r2, [r3, #16]
 800087c:	2381      	movs	r3, #129	; 0x81
 800087e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  i2c.sendBytes(no_blink, 0x070);
 8000882:	2370      	movs	r3, #112	; 0x70
 8000884:	9302      	str	r3, [sp, #8]
 8000886:	466b      	mov	r3, sp
 8000888:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800088c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000890:	6018      	str	r0, [r3, #0]
 8000892:	3304      	adds	r3, #4
 8000894:	7019      	strb	r1, [r3, #0]
 8000896:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800089a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800089c:	4832      	ldr	r0, [pc, #200]	; (8000968 <main+0x1d8>)
 800089e:	f7ff fdeb 	bl	8000478 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

  const std::array<uint8_t, 17> brightness = {0xEF, 0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 80008a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	741a      	strb	r2, [r3, #16]
 80008b2:	23ef      	movs	r3, #239	; 0xef
 80008b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  i2c.sendBytes(brightness, 0x070);
 80008b8:	2370      	movs	r3, #112	; 0x70
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	466b      	mov	r3, sp
 80008be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80008c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c6:	6018      	str	r0, [r3, #0]
 80008c8:	3304      	adds	r3, #4
 80008ca:	7019      	strb	r1, [r3, #0]
 80008cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008d2:	4825      	ldr	r0, [pc, #148]	; (8000968 <main+0x1d8>)
 80008d4:	f7ff fdd0 	bl	8000478 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>


  const std::array<uint8_t, 17> all_on = {0x00, 0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00};
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <main+0x1dc>)
 80008da:	f107 0418 	add.w	r4, r7, #24
 80008de:	461d      	mov	r5, r3
 80008e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e4:	682b      	ldr	r3, [r5, #0]
 80008e6:	7023      	strb	r3, [r4, #0]
  i2c.sendBytes(all_on, 0x070);
 80008e8:	2370      	movs	r3, #112	; 0x70
 80008ea:	9302      	str	r3, [sp, #8]
 80008ec:	466b      	mov	r3, sp
 80008ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80008f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f6:	6018      	str	r0, [r3, #0]
 80008f8:	3304      	adds	r3, #4
 80008fa:	7019      	strb	r1, [r3, #0]
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000902:	4819      	ldr	r0, [pc, #100]	; (8000968 <main+0x1d8>)
 8000904:	f7ff fdb8 	bl	8000478 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>

  const std::array<uint8_t, 17> all_off = {0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	741a      	strb	r2, [r3, #16]
  i2c.sendBytes(all_off, 0x070);
 8000916:	2370      	movs	r3, #112	; 0x70
 8000918:	9302      	str	r3, [sp, #8]
 800091a:	466b      	mov	r3, sp
 800091c:	f107 0210 	add.w	r2, r7, #16
 8000920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000924:	6018      	str	r0, [r3, #0]
 8000926:	3304      	adds	r3, #4
 8000928:	7019      	strb	r1, [r3, #0]
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <main+0x1d8>)
 8000930:	f7ff fda2 	bl	8000478 <_ZN9I2CMaster9sendBytesESt5arrayIhLj17EEh>


  /* Infinite loop */
  while (1)
  {
	  if(buttonPressed){
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <main+0x1c8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d007      	beq.n	800094e <main+0x1be>
	  greenLED.toggle();
 800093e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f860 	bl	8000a08 <_ZNK4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EE6toggleEv>
//	  Delay(0xFFFFF);
	  buttonPressed = false;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <main+0x1c8>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
	  }
	i++;
 800094e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000950:	3301      	adds	r3, #1
 8000952:	67fb      	str	r3, [r7, #124]	; 0x7c
	  if(buttonPressed){
 8000954:	e7ee      	b.n	8000934 <main+0x1a4>
 8000956:	bf00      	nop
 8000958:	2000001c 	.word	0x2000001c
 800095c:	000fffff 	.word	0x000fffff
 8000960:	40013800 	.word	0x40013800
 8000964:	40013c00 	.word	0x40013c00
 8000968:	20000024 	.word	0x20000024
 800096c:	08000eac 	.word	0x08000eac

08000970 <_Z5Delaym>:
  }
}
void Delay(__IO uint32_t nCount)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  while(nCount--)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	bf14      	ite	ne
 8000982:	2301      	movne	r3, #1
 8000984:	2300      	moveq	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d000      	beq.n	800098e <_Z5Delaym+0x1e>
 800098c:	e7f4      	b.n	8000978 <_Z5Delaym+0x8>
  {
  }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev>:
class GPIO{


public:

	GPIO(){
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

		//set mode register
		uint32_t tempMask = 0x00U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 80009a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009ac:	60fb      	str	r3, [r7, #12]

		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 80009ae:	68f9      	ldr	r1, [r7, #12]
 80009b0:	4811      	ldr	r0, [pc, #68]	; (80009f8 <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x5c>)
 80009b2:	f7ff fe2d 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>

		//set ouput type register
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 80009b6:	f000 f8d1 	bl	8000b5c <_ZN10reg_accessImmLm1073873924ELm0EE6reg_orEv>

		//set output speed register
		tempMask = 0x0U;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 80009be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009c2:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 80009c4:	68f9      	ldr	r1, [r7, #12]
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x60>)
 80009c8:	f7ff fe22 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>

		//set pull-up/pull-down register
		tempMask = 0x0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 80009d4:	68f9      	ldr	r1, [r7, #12]
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x64>)
 80009d8:	f7ff fe1a 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
		if(pinNumber <= PINS::PIN7){
			tempMask = 0x0U;
			tempMask = alternateFunction << ((pinNumber - 1) * 4);
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionLowRegister, tempMask);
		}else{
			tempMask = 0x0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 80009e4:	68f9      	ldr	r1, [r7, #12]
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <_ZN4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EEC1Ev+0x68>)
 80009e8:	f7ff fe12 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>

		}


	}
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40020400 	.word	0x40020400
 80009fc:	40020408 	.word	0x40020408
 8000a00:	4002040c 	.word	0x4002040c
 8000a04:	40020424 	.word	0x40020424

08000a08 <_ZNK4GPIOILm1073873920ELm13ELm1ELm0ELm1ELm0ELm0EE6toggleEv>:

	void toggle() const{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

		reg_access<GPIOxRegisterType, GPIOxRegisterType, GPIOxOutputDataRegister, bitPosition>::reg_xor();
 8000a10:	f000 f8b2 	bl	8000b78 <_ZN10reg_accessImmLm1073873940ELm4096EE7reg_xorEv>
	}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev>:
	GPIO(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 8000a2c:	68f9      	ldr	r1, [r7, #12]
 8000a2e:	4811      	ldr	r0, [pc, #68]	; (8000a74 <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev+0x58>)
 8000a30:	f7ff fdee 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 8000a34:	f000 f8b0 	bl	8000b98 <_ZN10reg_accessImmLm1073874948ELm0EE6reg_orEv>
		tempMask = 0x0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8000a3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000a40:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 8000a42:	68f9      	ldr	r1, [r7, #12]
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev+0x5c>)
 8000a46:	f7ff fde3 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 8000a52:	68f9      	ldr	r1, [r7, #12]
 8000a54:	4809      	ldr	r0, [pc, #36]	; (8000a7c <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev+0x60>)
 8000a56:	f7ff fddb 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 9) * 4);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionHighRegister, tempMask);
 8000a62:	68f9      	ldr	r1, [r7, #12]
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <_ZN4GPIOILm1073874944ELm14ELm0ELm0ELm1ELm0ELm0EEC1Ev+0x64>)
 8000a66:	f7ff fdd3 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020808 	.word	0x40020808
 8000a7c:	4002080c 	.word	0x4002080c
 8000a80:	40020824 	.word	0x40020824

08000a84 <_ZN4GPIOILm1073873920ELm7ELm1ELm1ELm2ELm0ELm4EEC1Ev>:
	GPIO(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 8000a96:	68f9      	ldr	r1, [r7, #12]
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <_ZN4GPIOILm1073873920ELm7ELm1ELm1ELm2ELm0ELm4EEC1Ev+0x5c>)
 8000a9a:	f7ff fdb9 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 8000a9e:	f000 f889 	bl	8000bb4 <_ZN10reg_accessImmLm1073873924ELm64EE6reg_orEv>
		tempMask = 0x0U;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aaa:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 8000aac:	68f9      	ldr	r1, [r7, #12]
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <_ZN4GPIOILm1073873920ELm7ELm1ELm1ELm2ELm0ELm4EEC1Ev+0x60>)
 8000ab0:	f7ff fdae 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 8000abc:	68f9      	ldr	r1, [r7, #12]
 8000abe:	480a      	ldr	r0, [pc, #40]	; (8000ae8 <_ZN4GPIOILm1073873920ELm7ELm1ELm1ELm2ELm0ELm4EEC1Ev+0x64>)
 8000ac0:	f7ff fda6 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 1) * 4);
 8000ac8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000acc:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionLowRegister, tempMask);
 8000ace:	68f9      	ldr	r1, [r7, #12]
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <_ZN4GPIOILm1073873920ELm7ELm1ELm1ELm2ELm0ELm4EEC1Ev+0x68>)
 8000ad2:	f7ff fd9d 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40020400 	.word	0x40020400
 8000ae4:	40020408 	.word	0x40020408
 8000ae8:	4002040c 	.word	0x4002040c
 8000aec:	40020420 	.word	0x40020420

08000af0 <_ZN4GPIOILm1073873920ELm8ELm1ELm1ELm2ELm0ELm4EEC1Ev>:
	GPIO(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
		uint32_t tempMask = 0x00U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
		tempMask = mode << ((pinNumber-1) * 2);
 8000afc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b00:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxModeRegister, tempMask);
 8000b02:	68f9      	ldr	r1, [r7, #12]
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <_ZN4GPIOILm1073873920ELm8ELm1ELm1ELm2ELm0ELm4EEC1Ev+0x5c>)
 8000b06:	f7ff fd83 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
		reg_access<GPIOxRegisterType, OutputType, GPIOxOutputTypeRegister, (outputType << (pinNumber-1))>::reg_or();
 8000b0a:	f000 f863 	bl	8000bd4 <_ZN10reg_accessImmLm1073873924ELm128EE6reg_orEv>
		tempMask = 0x0U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
		tempMask = outputSpeed << ((pinNumber-1) * 2);
 8000b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b16:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxOuputSpeedRegister, tempMask);
 8000b18:	68f9      	ldr	r1, [r7, #12]
 8000b1a:	480d      	ldr	r0, [pc, #52]	; (8000b50 <_ZN4GPIOILm1073873920ELm8ELm1ELm1ELm2ELm0ELm4EEC1Ev+0x60>)
 8000b1c:	f7ff fd78 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
		tempMask = 0x0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
		tempMask = pullUpPullDown << ((pinNumber-1) * 2);
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
		dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxPullUpPullDownRegister, tempMask);
 8000b28:	68f9      	ldr	r1, [r7, #12]
 8000b2a:	480a      	ldr	r0, [pc, #40]	; (8000b54 <_ZN4GPIOILm1073873920ELm8ELm1ELm1ELm2ELm0ELm4EEC1Ev+0x64>)
 8000b2c:	f7ff fd70 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
			tempMask = 0x0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
			tempMask = alternateFunction << ((pinNumber - 1) * 4);
 8000b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b38:	60fb      	str	r3, [r7, #12]
			dynamic_access<GPIOxRegisterType, uint32_t>::reg_or(GPIOxAlternateFunctionLowRegister, tempMask);
 8000b3a:	68f9      	ldr	r1, [r7, #12]
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <_ZN4GPIOILm1073873920ELm8ELm1ELm1ELm2ELm0ELm4EEC1Ev+0x68>)
 8000b3e:	f7ff fd67 	bl	8000610 <_ZN14dynamic_accessImmE6reg_orEmm>
	}
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40020408 	.word	0x40020408
 8000b54:	4002040c 	.word	0x4002040c
 8000b58:	40020420 	.word	0x40020420

08000b5c <_ZN10reg_accessImmLm1073873924ELm0EE6reg_orEv>:
    static void reg_set()
    {
        *reinterpret_cast<volatile reg_type*>(address) = value;
    }

    static void reg_or()
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
    {

        *reinterpret_cast<volatile reg_type*>(address) |= value;
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <_ZN10reg_accessImmLm1073873924ELm0EE6reg_orEv+0x18>)
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <_ZN10reg_accessImmLm1073873924ELm0EE6reg_orEv+0x18>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6013      	str	r3, [r2, #0]

    }
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40020404 	.word	0x40020404

08000b78 <_ZN10reg_accessImmLm1073873940ELm4096EE7reg_xorEv>:

    static void reg_xor()
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
    {

        *reinterpret_cast<volatile reg_type*>(address) ^= value;
 8000b7c:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <_ZN10reg_accessImmLm1073873940ELm4096EE7reg_xorEv+0x1c>)
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <_ZN10reg_accessImmLm1073873940ELm4096EE7reg_xorEv+0x1c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000b86:	6013      	str	r3, [r2, #0]

    }
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40020414 	.word	0x40020414

08000b98 <_ZN10reg_accessImmLm1073874948ELm0EE6reg_orEv>:
    static void reg_or()
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) |= value;
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <_ZN10reg_accessImmLm1073874948ELm0EE6reg_orEv+0x18>)
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <_ZN10reg_accessImmLm1073874948ELm0EE6reg_orEv+0x18>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6013      	str	r3, [r2, #0]
    }
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40020804 	.word	0x40020804

08000bb4 <_ZN10reg_accessImmLm1073873924ELm64EE6reg_orEv>:
    static void reg_or()
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) |= value;
 8000bb8:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <_ZN10reg_accessImmLm1073873924ELm64EE6reg_orEv+0x1c>)
 8000bba:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <_ZN10reg_accessImmLm1073873924ELm64EE6reg_orEv+0x1c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc2:	6013      	str	r3, [r2, #0]
    }
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40020404 	.word	0x40020404

08000bd4 <_ZN10reg_accessImmLm1073873924ELm128EE6reg_orEv>:
    static void reg_or()
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
        *reinterpret_cast<volatile reg_type*>(address) |= value;
 8000bd8:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_ZN10reg_accessImmLm1073873924ELm128EE6reg_orEv+0x1c>)
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <_ZN10reg_accessImmLm1073873924ELm128EE6reg_orEv+0x1c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be2:	6013      	str	r3, [r2, #0]
    }
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40020404 	.word	0x40020404

08000bf4 <_Z41__static_initialization_and_destruction_0ii>:
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d108      	bne.n	8000c16 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d103      	bne.n	8000c16 <_Z41__static_initialization_and_destruction_0ii+0x22>
I2CMaster i2c(I2C::BaseRegisters::I2C1_Base);
 8000c0e:	4904      	ldr	r1, [pc, #16]	; (8000c20 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8000c12:	f7ff fbc7 	bl	80003a4 <_ZN9I2CMasterC1Em>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40005400 	.word	0x40005400
 8000c24:	20000024 	.word	0x20000024

08000c28 <_GLOBAL__sub_I_buttonPressed>:
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff ffdf 	bl	8000bf4 <_Z41__static_initialization_and_destruction_0ii>
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c3e:	e003      	b.n	8000c48 <LoopCopyDataInit>

08000c40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c46:	3104      	adds	r1, #4

08000c48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c48:	480b      	ldr	r0, [pc, #44]	; (8000c78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c50:	d3f6      	bcc.n	8000c40 <CopyDataInit>
  ldr  r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c54:	e002      	b.n	8000c5c <LoopFillZerobss>

08000c56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c58:	f842 3b04 	str.w	r3, [r2], #4

08000c5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c60:	d3f9      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c62:	f000 f841 	bl	8000ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f000 f8f1 	bl	8000e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fd91 	bl	8000790 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c74:	08000ecc 	.word	0x08000ecc
  ldr  r0, =_sdata
 8000c78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c7c:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000c80:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000c84:	20000060 	.word	0x20000060

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>

08000c8a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <HardFault_Handler+0x4>

08000c9e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <MemManage_Handler+0x4>

08000ca4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <BusFault_Handler+0x4>

08000caa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <UsageFault_Handler+0x4>

08000cb0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4a16      	ldr	r2, [pc, #88]	; (8000d48 <SystemInit+0x60>)
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <SystemInit+0x60>)
 8000cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <SystemInit+0x64>)
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <SystemInit+0x64>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <SystemInit+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <SystemInit+0x64>)
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <SystemInit+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <SystemInit+0x64>)
 8000d20:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <SystemInit+0x68>)
 8000d22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d24:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <SystemInit+0x64>)
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <SystemInit+0x64>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <SystemInit+0x64>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000d36:	f000 f80d 	bl	8000d54 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d3a:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <SystemInit+0x60>)
 8000d3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d40:	609a      	str	r2, [r3, #8]
#endif
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	24003010 	.word	0x24003010

08000d54 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d62:	4a36      	ldr	r2, [pc, #216]	; (8000e3c <SetSysClock+0xe8>)
 8000d64:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <SetSysClock+0xe8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d6e:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <SetSysClock+0xe8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d76:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d103      	bne.n	8000d8c <SetSysClock+0x38>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d8a:	d1f0      	bne.n	8000d6e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <SetSysClock+0xe8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	e001      	b.n	8000da2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d142      	bne.n	8000e2e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000da8:	4a24      	ldr	r2, [pc, #144]	; (8000e3c <SetSysClock+0xe8>)
 8000daa:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <SetSysClock+0xe8>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <SetSysClock+0xec>)
 8000db6:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <SetSysClock+0xec>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dbe:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000dc0:	4a1e      	ldr	r2, [pc, #120]	; (8000e3c <SetSysClock+0xe8>)
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <SetSysClock+0xe8>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000dc8:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <SetSysClock+0xe8>)
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <SetSysClock+0xe8>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <SetSysClock+0xe8>)
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <SetSysClock+0xe8>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000dde:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <SetSysClock+0xe8>)
 8000de2:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <SetSysClock+0xf0>)
 8000de4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000de6:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <SetSysClock+0xe8>)
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <SetSysClock+0xe8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000df0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000df2:	bf00      	nop
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <SetSysClock+0xe8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f9      	beq.n	8000df4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <SetSysClock+0xf4>)
 8000e02:	f240 7205 	movw	r2, #1797	; 0x705
 8000e06:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e08:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <SetSysClock+0xe8>)
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <SetSysClock+0xe8>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f023 0303 	bic.w	r3, r3, #3
 8000e12:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e14:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <SetSysClock+0xe8>)
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <SetSysClock+0xe8>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000e20:	bf00      	nop
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SetSysClock+0xe8>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d1f9      	bne.n	8000e22 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40007000 	.word	0x40007000
 8000e44:	07405419 	.word	0x07405419
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <__libc_init_array>:
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	4e0d      	ldr	r6, [pc, #52]	; (8000e84 <__libc_init_array+0x38>)
 8000e50:	4c0d      	ldr	r4, [pc, #52]	; (8000e88 <__libc_init_array+0x3c>)
 8000e52:	1ba4      	subs	r4, r4, r6
 8000e54:	10a4      	asrs	r4, r4, #2
 8000e56:	2500      	movs	r5, #0
 8000e58:	42a5      	cmp	r5, r4
 8000e5a:	d109      	bne.n	8000e70 <__libc_init_array+0x24>
 8000e5c:	4e0b      	ldr	r6, [pc, #44]	; (8000e8c <__libc_init_array+0x40>)
 8000e5e:	4c0c      	ldr	r4, [pc, #48]	; (8000e90 <__libc_init_array+0x44>)
 8000e60:	f000 f818 	bl	8000e94 <_init>
 8000e64:	1ba4      	subs	r4, r4, r6
 8000e66:	10a4      	asrs	r4, r4, #2
 8000e68:	2500      	movs	r5, #0
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	d105      	bne.n	8000e7a <__libc_init_array+0x2e>
 8000e6e:	bd70      	pop	{r4, r5, r6, pc}
 8000e70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e74:	4798      	blx	r3
 8000e76:	3501      	adds	r5, #1
 8000e78:	e7ee      	b.n	8000e58 <__libc_init_array+0xc>
 8000e7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e7e:	4798      	blx	r3
 8000e80:	3501      	adds	r5, #1
 8000e82:	e7f2      	b.n	8000e6a <__libc_init_array+0x1e>
 8000e84:	08000ec0 	.word	0x08000ec0
 8000e88:	08000ec0 	.word	0x08000ec0
 8000e8c:	08000ec0 	.word	0x08000ec0
 8000e90:	08000ec8 	.word	0x08000ec8

08000e94 <_init>:
 8000e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e96:	bf00      	nop
 8000e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9a:	bc08      	pop	{r3}
 8000e9c:	469e      	mov	lr, r3
 8000e9e:	4770      	bx	lr

08000ea0 <_fini>:
 8000ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea2:	bf00      	nop
 8000ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ea6:	bc08      	pop	{r3}
 8000ea8:	469e      	mov	lr, r3
 8000eaa:	4770      	bx	lr
