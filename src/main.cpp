/*
******************************************************************************
File:     main.cpp
Info:     Generated by Atollic TrueSTUDIO(R) 9.0.1   2019-01-19

The MIT License (MIT)
Copyright (c) 2018 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include "stm32f4xx.h"
#include "stm32f4xx_exti.h"
#include "stm32f4xx_syscfg.h"
#include "misc.h"
#include "gpio.h"
#include "i2c.h"


/* Private macro */
/* Private variables */
volatile bool buttonPressed;

I2CMaster* I2CMaster::handlers[1] = {0};
I2CMaster i2c(I2C::BaseRegisters::I2C1_Base);




/* Private function prototypes */
void Delay(__IO uint32_t nCount);
void EXTI_Init(void);



extern "C"
{
	void EXTI0_IRQHandler(void)
	{
		// Checks whether the interrupt from EXTI0 or not
		if (EXTI_GetITStatus(EXTI_Line0))
		{
			buttonPressed= true;
			Delay(0xFFFFF);
			// Clears the EXTI line pending bit
			EXTI_ClearITPendingBit(EXTI_Line0);
		}
	}
}

//extern "C"{
//
//	void I2C1_EV_IRQHandler(void)
//	{
//		buttonPressed= true;
//		Delay(0xFFFFF);
//	}
//}
//
//extern "C"{
//	void I2C1_ER_IRQHandler(void)
//	{
//		buttonPressed= true;
//		Delay(0xFFFFF);
//	}
//}



/* Private functions */

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{

  int i = 0;

  buttonPressed = false;

  Delay(0xFFFFF);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);


  SYSCFG->EXTICR[1] = SYSCFG_EXTICR1_EXTI0_PA;

  EXTI->IMR |= EXTI_IMR_MR0;
  EXTI->RTSR |= EXTI_RTSR_TR0;

  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);

  NVIC_InitTypeDef NVIC_InitStructure;

  NVIC_InitStructure.NVIC_IRQChannel = I2C1_EV_IRQn; //TIM4 IRQ Channel
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;//Preemption Priority
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; //Sub Priority
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure);

  NVIC_InitTypeDef NVIC_InitStructure2;

  NVIC_InitStructure2.NVIC_IRQChannel = I2C1_ER_IRQn; //TIM4 IRQ Channel
  NVIC_InitStructure2.NVIC_IRQChannelPreemptionPriority = 0;//Preemption Priority
  NVIC_InitStructure2.NVIC_IRQChannelSubPriority = 0; //Sub Priority
  NVIC_InitStructure2.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure2);

  NVIC_EnableIRQ(EXTI0_IRQn);
  NVIC_SetPriority(EXTI0_IRQn, 0);

//  NVIC_EnableIRQ(I2C1_EV_IRQn);
//  NVIC_SetPriority(I2C1_EV_IRQn, 0);
//
//  NVIC_EnableIRQ(I2C1_ER_IRQn);
//  NVIC_SetPriority(I2C1_ER_IRQn, 0);

  __enable_irq();





  const GPIO<GPIOxBaseRegisters::GPIO_B,
  	  PINS::PIN12,
  	  GpioModes::Output,
  	  OutputTypes::PushPull,
  	  OutputSpeed::MediumSpeed,
  	  PullUpPullDown::NoPullUpPullDown,
  	  AlternateFunction::AF0>greenLED;

//  greenLED.toggle();

  //set PA15 as input
  const GPIO<GPIOxBaseRegisters::GPIO_C,
  	  PINS::PIN13,
	  GpioModes::Input,
	  OutputTypes::PushPull,
	  OutputSpeed::MediumSpeed,
	  PullUpPullDown::NoPullUpPullDown,
	  AlternateFunction::AF0>buttonPin;

  const GPIO<GPIOxBaseRegisters::GPIO_B,
  	  PINS::PIN6,
  	  GpioModes::AlternateFunction,
  	  OutputTypes::OpenDrain,
  	  OutputSpeed::HighSpeed,
  	  PullUpPullDown::NoPullUpPullDown,
  	  AlternateFunction::AF4>sdaPin;

  const GPIO<GPIOxBaseRegisters::GPIO_B,
  	  PINS::PIN7,
  	  GpioModes::AlternateFunction,
  	  OutputTypes::OpenDrain,
  	  OutputSpeed::HighSpeed,
  	  PullUpPullDown::NoPullUpPullDown,
  	  AlternateFunction::AF4>sclPin;

//  //*********************************************************************************************************************
//
//	I2C::ClockControlRegisterType clockControlRegister;
//	I2C::ControlRegister1Type controlRegister1;
//	I2C::ControlRegister2Type controlRegister2;
//	I2C::DataRegisterType dataRegister;
//	I2C::FilterRegisterTYpe filterRegister;
//	I2C::OwnAddressRegisterType ownAddressRegister;
//	I2C::OwnAddressRegister2Type ownAddressRegister2;
//	I2C::StatusRegister1Type statusRegister1;
//	I2C::StatusRegister2Type statusRegister2;
//	I2C::TRiseRegisterType triseRegister;
//	I2C::BaseRegisterType baseRegister;
//
//	baseRegister = I2C::BaseRegisters::I2C1_Base;
//
//	clockControlRegister = baseRegister + I2C::ClockControlRegister::RegiserOffset;
//	controlRegister1 = baseRegister + I2C::ControlRegister1::RegisterOffset;
//	controlRegister2 = baseRegister + I2C::ControlRegister2::RegisterOffset;
//	dataRegister = baseRegister + I2C::DataRegister::RegisterOffset;
//	filterRegister = baseRegister + I2C::FilterRegister::RegisterOffset;
//	ownAddressRegister = baseRegister + I2C::OwnAddressRegister::RegisterOffset;
//	ownAddressRegister2 = baseRegister + I2C::OwnAddressRegister2::RegisterOffset;
//	statusRegister1 = baseRegister + I2C::StatusRegister1::RegisterOffset;
//	statusRegister2 = baseRegister + I2C::StatusRegister2::RegisterOffset;
//	triseRegister = baseRegister + I2C::TRiseRegiser::RegisterOffset;
//
//	uint8_t bytesSent;
//
//	// Step 1: Initialize I2C
//	//Program the peripheral input clock in the I2C_CR2 register in order to generate the correct timings
//	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
//
//	//set frequency bits
//	dynamic_access<I2C::ControlRegister2Type, I2C::ControlRegister2Type>::reg_or(controlRegister2, 0x10U);
//
//    //configure the clock control registers
//    dynamic_access<I2C::ClockControlRegisterType, I2C::ClockControlRegisterType>::reg_or(clockControlRegister, 0x50U);
//
//    //configure the rise time register
//    dynamic_access<I2C::TRiseRegisterType, I2C::TRiseRegisterType>::reg_or(triseRegister, 0x11U);
//
//    //program the I2C_CR1 register to enable the peripheral
//    dynamic_access<I2C::ControlRegister2Type, I2C::ControlRegister2Type>::reg_or(controlRegister2,
//    		I2C::ControlRegister2::BufferInterruptEnable |
//			I2C::ControlRegister2::ErrorInterruptEnable |
//			I2C::ControlRegister2::EventInterruptEnable);
//
//
//
//    dynamic_access<I2C::ControlRegister1Type, I2C::ControlRegister1Type>::reg_not(controlRegister1,
//    		I2C::ControlRegister1::ACK);
//
//    dynamic_access<I2C::ControlRegister1Type, I2C::ControlRegister1Type>::reg_or(controlRegister1,
//    		I2C::ControlRegister1::PeripheralEnable);
//
//	dynamic_access<I2C::ControlRegister1Type, I2C::ControlRegister1Type> ::reg_or(controlRegister1, I2C::ControlRegister1::Start);
//
//
//	//**********************************************************************************************************************






  /**
  *  IMPORTANT NOTE!
  *  The symbol VECT_TAB_SRAM needs to be defined when building the project
  *  if code has been located to RAM and interrupts are used. 
  *  Otherwise the interrupt table located in flash will be used.
  *  See also the <system_*.c> file and how the SystemInit() function updates 
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */
  const std::array<uint8_t, 17> osc_on = {0x21, 0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  i2c.sendBytes(osc_on, 0x070);

//  const std::array<uint8_t, 17> no_blink = {0x81, 0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//  i2c.sendBytes(no_blink, 0x070);
//
//  const std::array<uint8_t, 17> brightness = {0xEF, 0,0,0,0,0,0,0,0,0,0,0,0,0,0};
//  i2c.sendBytes(brightness, 0x070);
//
//
//  const std::array<uint8_t, 17> all_on = {0x00, 0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00,0xFF,0x00};
//  i2c.sendBytes(all_on, 0x070);
//
//  const std::array<uint8_t, 17> all_off = {0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
//  i2c.sendBytes(all_off, 0x070);




  /* Infinite loop */
  while (1)
  {
	  if(buttonPressed){
	  greenLED.toggle();
//	  Delay(0xFFFFF);
	  buttonPressed = false;
	  }
	i++;
  }
}
void Delay(__IO uint32_t nCount)
{
  while(nCount--)
  {
  }
}






